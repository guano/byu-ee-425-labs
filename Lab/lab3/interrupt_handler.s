; Generated by c86 (BYU-NASM) 5.1 (beta) from interrupt_handler.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
c_isr_reset:
	; >>>>> Line:	13
	; >>>>> void c_isr_reset(){ 
	jmp	L_interrupt_handler_1
L_interrupt_handler_2:
	; >>>>> Line:	15
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_interrupt_handler_1:
	push	bp
	mov	bp, sp
	jmp	L_interrupt_handler_2
	ALIGN	2
L_interrupt_handler_4:
	DW	0
L_interrupt_handler_5:
	DB	0xA,"TICK ",0
	ALIGN	2
c_isr_tick:
	; >>>>> Line:	18
	; >>>>> void c_isr_tick(){ 
	jmp	L_interrupt_handler_6
L_interrupt_handler_7:
	; >>>>> Line:	21
	; >>>>> printString("\nTICK "); 
	mov	ax, L_interrupt_handler_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	22
	; >>>>> printInt(tick_number++); 
	mov	ax, word [L_interrupt_handler_4]
	inc	word [L_interrupt_handler_4]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	23
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_interrupt_handler_6:
	push	bp
	mov	bp, sp
	jmp	L_interrupt_handler_7
L_interrupt_handler_12:
	DB	") IGNORED",0xA,0
L_interrupt_handler_11:
	DB	0xA,"KEYPRESS (",0
L_interrupt_handler_10:
	DB	0xA,"DELAY COMPLETE",0xA,0
L_interrupt_handler_9:
	DB	0xA,"DELAY KEY PRESSED",0xA,0
	ALIGN	2
c_isr_keypress:
	; >>>>> Line:	26
	; >>>>> void c_isr_keypress(){ 
	jmp	L_interrupt_handler_13
L_interrupt_handler_14:
	; >>>>> Line:	30
	; >>>>> if(c == 'd'){ 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	30
	; >>>>> if(c == 'd'){ 
	cmp	byte [bp-1], 100
	jne	L_interrupt_handler_15
	; >>>>> Line:	31
	; >>>>> printString("\nDELAY KEY PRESSED\n"); 
	mov	ax, L_interrupt_handler_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> delay(); 
	call	delay
	; >>>>> Line:	33
	; >>>>> printString("\nDELAY COMPLETE\n"); 
	mov	ax, L_interrupt_handler_10
	push	ax
	call	printString
	add	sp, 2
	jmp	L_interrupt_handler_16
L_interrupt_handler_15:
	; >>>>> Line:	35
	; >>>>> printString("\nKEYPRESS ("); 
	mov	ax, L_interrupt_handler_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> printString(") IGNORED\n"); 
	mov	ax, L_interrupt_handler_12
	push	ax
	call	printString
	add	sp, 2
L_interrupt_handler_16:
	mov	sp, bp
	pop	bp
	ret
L_interrupt_handler_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_interrupt_handler_14
	ALIGN	2
delay:
	; >>>>> Line:	42
	; >>>>> void 
	jmp	L_interrupt_handler_18
L_interrupt_handler_19:
	; >>>>> Line:	44
	; >>>>> for(i=0; i<5000; i++){ 
	mov	word [bp-2], 0
	; >>>>> Line:	44
	; >>>>> for(i=0; i<5000; i++){ 
	mov	word [bp-2], 0
	jmp	L_interrupt_handler_21
L_interrupt_handler_20:
L_interrupt_handler_23:
	; >>>>> Line:	45
	; >>>>> ; 
	inc	word [bp-2]
L_interrupt_handler_21:
	cmp	word [bp-2], 5000
	jl	L_interrupt_handler_20
L_interrupt_handler_22:
	mov	sp, bp
	pop	bp
	ret
L_interrupt_handler_18:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_interrupt_handler_19
