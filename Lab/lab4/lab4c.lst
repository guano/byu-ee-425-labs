 LINE  | ADDRESS  | HEX DUMP                  | ASSEMBLY
-------|----------|---------------------------|----------------------------
     1 |          |                           |         CPU     8086
     2 |          |                           |         ORG     0h
     3 |          |                           | InterruptVectorTable:
     4 |          |                           |         ; Internal x86 Interrupts:
     5 | 00000000 | 00000000                  |         dd      0 ; Reserved (Div err)  ; Int 00h
     6 | 00000004 | 00000000                  |         dd      0 ; Reserved (Step)     ; Int 01h
     7 | 00000008 | 00000000                  |         dd      0 ; Reserved (NMI)      ; Int 02h
     8 | 0000000C | 00000000                  |         dd      0 ; Reserved (Break)    ; Int 03h
     9 | 00000010 | 00000000                  |         dd      0 ; Reserved (Overflow) ; Int 04h
    10 | 00000014 | 00000000                  |         dd      0                       ; Int 05h
    11 | 00000018 | 00000000                  |         dd      0                       ; Int 06h
    12 | 0000001C | 00000000                  |         dd      0                       ; Int 07h
    13 |          |                           |         ; Hardware Interrupts:
    14 | 00000020 | [86080000]                |         dd      isr_reset ; Reset               ; Int 08h (IRQ 0)
    15 | 00000024 | [A6080000]                |         dd      isr_tick ; Tick                ; Int 09h (IRQ 1)
    16 | 00000028 | [8A080000]                |         dd      isr_keypress ; Keyboard            ; Int 0Ah (IRQ 2)
    17 | 0000002C | 00000000                  |         dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
    18 | 00000030 | 00000000                  |         dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
    19 | 00000034 | 00000000                  |         dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
    20 | 00000038 | 00000000                  |         dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
    21 | 0000003C | 00000000                  |         dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
    22 |          |                           |         ; Software Interrupts:
    23 | 00000040 | 00000000                  |         dd      0 ; Reserved (PC BIOS)  ; Int 10h
    24 | 00000044 | 00000000                  |         dd      0                       ; Int 11h
    25 | 00000048 | 00000000                  |         dd      0                       ; Int 12h
    26 | 0000004C | 00000000                  |         dd      0                       ; Int 13h
    27 | 00000050 | 00000000                  |         dd      0                       ; Int 14h
    28 | 00000054 | 00000000                  |         dd      0                       ; Int 15h
    29 | 00000058 | 00000000                  |         dd      0                       ; Int 16h
    30 | 0000005C | 00000000                  |         dd      0                       ; Int 17h
    31 | 00000060 | 00000000                  |         dd      0                       ; Int 18h
    32 | 00000064 | 00000000                  |         dd      0                       ; Int 19h
    33 | 00000068 | 00000000                  |         dd      0                       ; Int 1Ah
    34 | 0000006C | 00000000                  |         dd      0                       ; Int 1Bh
    35 | 00000070 | 00000000                  |         dd      0                       ; Int 1Ch
    36 | 00000074 | 00000000                  |         dd      0                       ; Int 1Dh
    37 | 00000078 | 00000000                  |         dd      0                       ; Int 1Eh
    38 | 0000007C | 00000000                  |         dd      0                       ; Int 1Fh
    39 | 00000080 | 00000000                  |         dd      0                       ; Int 20h
    40 | 00000084 | 00000000                  |         dd      0 ; Reserved (DOS)      ; Int 21h
    41 | 00000088 | 00000000                  |         dd      0 ; Simptris Services   ; Int 22h
    42 | 0000008C | 00000000                  |         dd      0                       ; Int 23h
    43 | 00000090 | 00000000                  |         dd      0                       ; Int 24h
    44 | 00000094 | 00000000                  |         dd      0                       ; Int 25h
    45 | 00000098 | 00000000                  |         dd      0                       ; Int 26h
    46 | 0000009C | 00000000                  |         dd      0                       ; Int 27h
    47 | 000000A0 | 00000000                  |         dd      0                       ; Int 28h
    48 | 000000A4 | 00000000                  |         dd      0                       ; Int 29h
    49 | 000000A8 | 00000000                  |         dd      0                       ; Int 2Ah
    50 | 000000AC | 00000000                  |         dd      0                       ; Int 2Bh
    51 | 000000B0 | 00000000                  |         dd      0                       ; Int 2Ch
    52 | 000000B4 | 00000000                  |         dd      0                       ; Int 2Dh
    53 | 000000B8 | 00000000                  |         dd      0                       ; Int 2Eh
    54 | 000000BC | 00000000                  |         dd      0                       ; Int 2Fh
    55 |          |                           | KeyBuffer:                              ; Address 0xC0
    56 | 000000C0 | 0000                      |         dw      0
    57 |          |                           | NewPieceType:                           ; Address 0xC2
    58 | 000000C2 | 0000                      |         dw      0
    59 |          |                           | NewPieceID:                             ; Address 0xC4
    60 | 000000C4 | 0000                      |         dw      0
    61 |          |                           | NewPieceOrientation:                    ; Address 0xC6
    62 | 000000C6 | 0000                      |         dw      0
    63 |          |                           | NewPieceColumn:                         ; Address 0xC8
    64 | 000000C8 | 0000                      |         dw      0
    65 |          |                           | TouchdownID:                            ; Address 0xCA
    66 | 000000CA | 0000                      | 	dw	0
    67 |          |                           | ScreenBitMap0:                          ; Address 0xCC
    68 | 000000CC | 0000                      |         dw      0
    69 |          |                           | ScreenBitMap1:
    70 | 000000CE | 0000                      |         dw      0
    71 |          |                           | ScreenBitMap2:
    72 | 000000D0 | 0000                      |         dw      0
    73 |          |                           | ScreenBitMap3:
    74 | 000000D2 | 0000                      |         dw      0
    75 |          |                           | ScreenBitMap4:
    76 | 000000D4 | 0000                      |         dw      0
    77 |          |                           | ScreenBitMap5:
    78 | 000000D6 | 0000                      |         dw      0
    79 | 000000D8 | 00<rept>                  | TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
    80 | 00000100 | E99F0D                    | 	jmp	main
    81 |          |                           | ; This file contains support routines for 32-bit on the 8086.
    82 |          |                           | ; It is intended for use code generated by the C86 compiler.
    83 |          |                           | ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    84 |          |                           | SR_asldiv:			; l1 /= l2
    85 | 00000103 | 55                        | 	push	bp
    86 | 00000104 | 89E5                      | 	mov	bp,sp
    87 | 00000106 | 53                        | 	push	bx
    88 | 00000107 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of l1	(was push3)
    89 | 0000010A | FF7608                    | 	push	word [bp+8]	; Push hi l2		(was push1)
    90 | 0000010D | FF7606                    | 	push	word [bp+6]	; Push lo l2		(was push2)
    91 | 00000110 | FF7702                    | 	push	word [bx+2]	; Push hi l1
    92 | 00000113 | FF37                      | 	push	word [bx]	; Push lo l1
    93 | 00000115 | E83D01                    | 	call	SR_ldiv
    94 | 00000118 | 8B5E04                    | 	mov	bx,[bp+4]	; Restore l1 address
    95 | 0000011B | 895702                    | 	mov	[bx+2],dx	; Store result
    96 | 0000011E | 8907                      | 	mov	[bx],ax
    97 | 00000120 | 5B                        | 	pop	bx
    98 | 00000121 | 5D                        | 	pop	bp
    99 | 00000122 | C3                        | 	ret
   100 |          |                           | SR_aslmod:			; l1 %= l2
   101 | 00000123 | 55                        | 	push	bp
   102 | 00000124 | 89E5                      | 	mov	bp,sp
   103 | 00000126 | 53                        | 	push	bx
   104 | 00000127 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of l1	(was push3)
   105 | 0000012A | FF7608                    | 	push	word [bp+8]	; Push hi l2		(was push1)
   106 | 0000012D | FF7606                    | 	push	word [bp+6]	; Push lo l2		(was push2)
   107 | 00000130 | FF7702                    | 	push	word [bx+2]	; Push hi l1
   108 | 00000133 | FF37                      | 	push	word [bx]	; Push lo l1
   109 | 00000135 | E82C01                    | 	call	SR_lmod
   110 | 00000138 | 8B5E04                    | 	mov	bx,[bp+4]	; Restore l1 address
   111 | 0000013B | 895702                    | 	mov	[bx+2],dx	; Store result
   112 | 0000013E | 8907                      | 	mov	[bx],ax
   113 | 00000140 | 5B                        | 	pop	bx
   114 | 00000141 | 5D                        | 	pop	bp
   115 | 00000142 | C3                        | 	ret
   116 |          |                           | SR_aslmul:			; l1 *= l2
   117 | 00000143 | 55                        | 	push	bp
   118 | 00000144 | 89E5                      | 	mov	bp,sp
   119 | 00000146 | 53                        | 	push	bx
   120 | 00000147 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of l1	(was push3)
   121 | 0000014A | FF7608                    | 	push	word [bp+8]	; Push hi l2		(was push1)
   122 | 0000014D | FF7606                    | 	push	word [bp+6]	; Push lo l2		(was push2)
   123 | 00000150 | FF7702                    | 	push	word [bx+2]	; Push hi l1
   124 | 00000153 | FF37                      | 	push	word [bx]	; Push lo l1
   125 | 00000155 | E84002                    | 	call	SR_lmul
   126 | 00000158 | 83C408                    | 	add	sp,8
   127 | 0000015B | 8B5E04                    | 	mov	bx,[bp+4]	; Restore l1 address
   128 | 0000015E | 895702                    | 	mov	[bx+2],dx	; Store result
   129 | 00000161 | 8907                      | 	mov	[bx],ax
   130 | 00000163 | 5B                        | 	pop	bx
   131 | 00000164 | 5D                        | 	pop	bp
   132 | 00000165 | C3                        | 	ret
   133 |          |                           | SR_aslshl:			; l1 <<= l2
   134 | 00000166 | 55                        | 	push	bp
   135 | 00000167 | 89E5                      | 	mov	bp,sp
   136 | 00000169 | 53                        | 	push	bx
   137 | 0000016A | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of l1	(was push3)
   138 | 0000016D | FF7608                    | 	push	word [bp+8]	; Push hi l2		(was push1)
   139 | 00000170 | FF7606                    | 	push	word [bp+6]	; Push lo l2		(was push2)
   140 | 00000173 | FF7702                    | 	push	word [bx+2]	; Push hi l1
   141 | 00000176 | FF37                      | 	push	word [bx]	; Push lo l1
   142 | 00000178 | E88801                    | 	call	SR_lshl
   143 | 0000017B | 83C408                    | 	add	sp,8
   144 | 0000017E | 8B5E04                    | 	mov	bx,[bp+4]	; Restore l1 address
   145 | 00000181 | 895702                    | 	mov	[bx+2],dx	; Store result
   146 | 00000184 | 8907                      | 	mov	[bx],ax
   147 | 00000186 | 5B                        | 	pop	bx
   148 | 00000187 | 5D                        | 	pop	bp
   149 | 00000188 | C3                        | 	ret
   150 |          |                           | SR_aslshr:			; l1 >>= l2
   151 | 00000189 | 55                        | 	push	bp
   152 | 0000018A | 89E5                      | 	mov	bp,sp
   153 | 0000018C | 53                        | 	push	bx
   154 | 0000018D | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of l1	(was push3)
   155 | 00000190 | FF7608                    | 	push	word [bp+8]	; Push hi l2		(was push1)
   156 | 00000193 | FF7606                    | 	push	word [bp+6]	; Push lo l2		(was push2)
   157 | 00000196 | FF7702                    | 	push	word [bx+2]	; Push hi l1
   158 | 00000199 | FF37                      | 	push	word [bx]	; Push lo l1
   159 | 0000019B | E89701                    | 	call	SR_lshr
   160 | 0000019E | 83C408                    | 	add	sp,8
   161 | 000001A1 | 8B5E04                    | 	mov	bx,[bp+4]	; Restore l1 address
   162 | 000001A4 | 895702                    | 	mov	[bx+2],dx	; Store result
   163 | 000001A7 | 8907                      | 	mov	[bx],ax
   164 | 000001A9 | 5B                        | 	pop	bx
   165 | 000001AA | 5D                        | 	pop	bp
   166 | 000001AB | C3                        | 	ret
   167 |          |                           | 
   168 |          |                           | 
   169 |          |                           | SR_asuldiv:			; u1 /= u2
   170 | 000001AC | 55                        | 	push	bp
   171 | 000001AD | 89E5                      | 	mov	bp,sp
   172 | 000001AF | 53                        | 	push	bx
   173 | 000001B0 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of u1	(was push3)
   174 | 000001B3 | FF7608                    | 	push	word [bp+8]	; Push hi u2		(was push1)
   175 | 000001B6 | FF7606                    | 	push	word [bp+6]	; Push lo u2		(was push2)
   176 | 000001B9 | FF7702                    | 	push	word [bx+2]	; Push hi u1
   177 | 000001BC | FF37                      | 	push	word [bx]	; Push lo u1
   178 | 000001BE | E89B00                    | 	call	SR_uldiv
   179 | 000001C1 | 8B5E04                    | 	mov	bx,[bp+4]	; Restore u1 address
   180 | 000001C4 | 895702                    | 	mov	[bx+2],dx	; Store result
   181 | 000001C7 | 8907                      | 	mov	[bx],ax
   182 | 000001C9 | 5B                        | 	pop	bx
   183 | 000001CA | 5D                        | 	pop	bp
   184 | 000001CB | C3                        | 	ret
   185 |          |                           | SR_asilmod:			; u1 %= u2
   186 | 000001CC | 55                        | 	push	bp
   187 | 000001CD | 89E5                      | 	mov	bp,sp
   188 | 000001CF | 53                        | 	push	bx
   189 | 000001D0 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of u1	(was push3)
   190 | 000001D3 | FF7608                    | 	push	word [bp+8]	; Push hi u2		(was push1)
   191 | 000001D6 | FF7606                    | 	push	word [bp+6]	; Push lo u2		(was push2)
   192 | 000001D9 | FF7702                    | 	push	word [bx+2]	; Push hi u1
   193 | 000001DC | FF37                      | 	push	word [bx]	; Push lo u1
   194 | 000001DE | E88B00                    | 	call	SR_ilmod
   195 | 000001E1 | 8B5E04                    | 	mov	bx,[bp+4]	; Restore u1 address
   196 | 000001E4 | 895702                    | 	mov	[bx+2],dx	; Store result
   197 | 000001E7 | 8907                      | 	mov	[bx],ax
   198 | 000001E9 | 5B                        | 	pop	bx
   199 | 000001EA | 5D                        | 	pop	bp
   200 | 000001EB | C3                        | 	ret
   201 |          |                           | SR_asulmul:			; u1 *= u2
   202 | 000001EC | 55                        | 	push	bp
   203 | 000001ED | 89E5                      | 	mov	bp,sp
   204 | 000001EF | 53                        | 	push	bx
   205 | 000001F0 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of u1	(was push3)
   206 | 000001F3 | FF7608                    | 	push	word [bp+8]	; Push hi u2		(was push1)
   207 | 000001F6 | FF7606                    | 	push	word [bp+6]	; Push lo u2		(was push2)
   208 | 000001F9 | FF7702                    | 	push	word [bx+2]	; Push hi u1
   209 | 000001FC | FF37                      | 	push	word [bx]	; Push lo u1
   210 | 000001FE | E89701                    | 	call	SR_ulmul
   211 | 00000201 | 83C408                    | 	add	sp,8
   212 | 00000204 | 8B5E04                    | 	mov	bx,[bp+4]	; Restore u1 address
   213 | 00000207 | 895702                    | 	mov	[bx+2],dx	; Store result
   214 | 0000020A | 8907                      | 	mov	[bx],ax
   215 | 0000020C | 5B                        | 	pop	bx
   216 | 0000020D | 5D                        | 	pop	bp
   217 | 0000020E | C3                        | 	ret
   218 |          |                           | SR_asulshl:			; u1 << u2
   219 | 0000020F | 55                        | 	push	bp
   220 | 00000210 | 89E5                      | 	mov	bp,sp
   221 | 00000212 | 53                        | 	push	bx
   222 | 00000213 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of u1	(was push3)
   223 | 00000216 | FF7608                    | 	push	word [bp+8]	; Push hi u2		(was push1)
   224 | 00000219 | FF7606                    | 	push	word [bp+6]	; Push lo u2		(was push2)
   225 | 0000021C | FF7702                    | 	push	word [bx+2]	; Push hi u1
   226 | 0000021F | FF37                      | 	push	word [bx]	; Push lo u1
   227 | 00000221 | E8DF00                    | 	call	SR_ulshl
   228 | 00000224 | 83C408                    | 	add	sp,8
   229 | 00000227 | 8B5E04                    | 	mov	bx,[bp+4]	; Restore u1 address
   230 | 0000022A | 895702                    | 	mov	[bx+2],dx	; Store result
   231 | 0000022D | 8907                      | 	mov	[bx],ax
   232 | 0000022F | 5B                        | 	pop	bx
   233 | 00000230 | 5D                        | 	pop	bp
   234 | 00000231 | C3                        | 	ret
   235 |          |                           | SR_asulshr:			; u1 >> u2
   236 | 00000232 | 55                        | 	push	bp
   237 | 00000233 | 89E5                      | 	mov	bp,sp
   238 | 00000235 | 53                        | 	push	bx
   239 | 00000236 | 8B5E04                    | 	mov	bx,[bp+4]	; Get address of u1	(was push3)
   240 | 00000239 | FF7608                    | 	push	word [bp+8]	; Push hi u2		(was push1)
   241 | 0000023C | FF7606                    | 	push	word [bp+6]	; Push lo u2		(was push2)
   242 | 0000023F | FF7702                    | 	push	word [bx+2]	; Push hi u1
   243 | 00000242 | FF37                      | 	push	word [bx]	; Push lo u1
   244 | 00000244 | E81F01                    | 	call	SR_ulshr
   245 | 00000247 | 83C408                    | 	add	sp,8
   246 | 0000024A | 8B5E04                    | 	mov	bx,[bp+4]	; Restore u1 address
   247 | 0000024D | 895702                    | 	mov	[bx+2],dx	; Store result
   248 | 00000250 | 8907                      | 	mov	[bx],ax
   249 | 00000252 | 5B                        | 	pop	bx
   250 | 00000253 | 5D                        | 	pop	bp
   251 | 00000254 | C3                        | 	ret
   252 |          |                           | 
   253 |          |                           | 
   254 |          |                           | ; Main 32-bit routines begin here:
   255 |          |                           | 
   256 |          |                           | SR_ldiv:	; N_LDIV@
   257 | 00000255 | 59                        | 	pop    cx
   258 | 00000256 | 0E                        | 	push   cs
   259 | 00000257 | 51                        | 	push   cx
   260 |          |                           | 	; LDIV@
   261 | 00000258 | 31C9                      | 	xor    cx,cx
   262 | 0000025A | EB16                      | 	jmp    LSR_01
   263 |          |                           | SR_uldiv:	; N_LUDIV@
   264 | 0000025C | 59                        | 	pop    cx
   265 | 0000025D | 0E                        | 	push   cs
   266 | 0000025E | 51                        | 	push   cx
   267 |          |                           | 	; F_LUDIV@
   268 | 0000025F | B90100                    | 	mov    cx,0001
   269 | 00000262 | EB0E                      | 	jmp    LSR_01
   270 |          |                           | SR_lmod:	; N_LMOD@
   271 | 00000264 | 59                        | 	pop    cx
   272 | 00000265 | 0E                        | 	push   cs
   273 | 00000266 | 51                        | 	push   cx
   274 |          |                           | 	; F_LMOD@
   275 | 00000267 | B90200                    | 	mov    cx,0002
   276 | 0000026A | EB06                      | 	jmp    LSR_01
   277 |          |                           | SR_ilmod:	; N_LUMOD@
   278 | 0000026C | 59                        | 	pop    cx
   279 | 0000026D | 0E                        | 	push   cs
   280 | 0000026E | 51                        | 	push   cx
   281 |          |                           | 	; LUMOD@
   282 | 0000026F | B90300                    | 	mov    cx,0003
   283 |          |                           | LSR_01:
   284 | 00000272 | 55                        | 	push   bp
   285 | 00000273 | 56                        | 	push   si
   286 | 00000274 | 57                        | 	push   di
   287 | 00000275 | 89E5                      | 	mov    bp,sp
   288 | 00000277 | 89CF                      | 	mov    di,cx
   289 | 00000279 | 8B460A                    | 	mov    ax,[bp+0Ah]
   290 | 0000027C | 8B560C                    | 	mov    dx,[bp+0Ch]
   291 | 0000027F | 8B5E0E                    | 	mov    bx,[bp+0Eh]
   292 | 00000282 | 8B4E10                    | 	mov    cx,[bp+10h]
   293 | 00000285 | 09C9                      | 	or     cx,cx
   294 | 00000287 | 7508                      | 	jne    LSR_02
   295 | 00000289 | 09D2                      | 	or     dx,dx
   296 | 0000028B | 7469                      | 	je     LSR_10
   297 | 0000028D | 09DB                      | 	or     bx,bx
   298 | 0000028F | 7465                      | 	je     LSR_10
   299 |          |                           | LSR_02:
   300 | 00000291 | F7C70100                  | 	test   di,0001
   301 | 00000295 | 751C                      | 	jne    LSR_04
   302 | 00000297 | 09D2                      | 	or     dx,dx
   303 | 00000299 | 790A                      | 	jns    LSR_03
   304 | 0000029B | F7DA                      | 	neg    dx
   305 | 0000029D | F7D8                      | 	neg    ax
   306 | 0000029F | 83DA00                    | 	sbb    dx,0000
   307 | 000002A2 | 83CF0C                    | 	or     di,000Ch
   308 |          |                           | LSR_03:
   309 | 000002A5 | 09C9                      | 	or     cx,cx
   310 | 000002A7 | 790A                      | 	jns    LSR_04
   311 | 000002A9 | F7D9                      | 	neg    cx
   312 | 000002AB | F7DB                      | 	neg    bx
   313 | 000002AD | 83D900                    | 	sbb    cx,0000
   314 | 000002B0 | 83F704                    | 	xor    di,0004
   315 |          |                           | LSR_04:
   316 | 000002B3 | 89CD                      | 	mov    bp,cx
   317 | 000002B5 | B92000                    | 	mov    cx,0020h
   318 | 000002B8 | 57                        | 	push   di
   319 | 000002B9 | 31FF                      | 	xor    di,di
   320 | 000002BB | 31F6                      | 	xor    si,si
   321 |          |                           | LSR_05:
   322 | 000002BD | D1E0                      | 	shl    ax,1
   323 | 000002BF | D1D2                      | 	rcl    dx,1
   324 | 000002C1 | D1D6                      | 	rcl    si,1
   325 | 000002C3 | D1D7                      | 	rcl    di,1
   326 | 000002C5 | 39EF                      | 	cmp    di,bp
   327 | 000002C7 | 720B                      | 	jb     LSR_07
   328 | 000002C9 | 7704                      | 	ja     LSR_06
   329 | 000002CB | 39DE                      | 	cmp    si,bx
   330 | 000002CD | 7205                      | 	jb     LSR_07
   331 |          |                           | LSR_06:
   332 | 000002CF | 29DE                      | 	sub    si,bx
   333 | 000002D1 | 19EF                      | 	sbb    di,bp
   334 | 000002D3 | 40                        | 	inc    ax
   335 |          |                           | LSR_07:
   336 | 000002D4 | E2E7                      | 	loop   LSR_05
   337 | 000002D6 | 5B                        | 	pop    bx
   338 | 000002D7 | F7C30200                  | 	test   bx,0002
   339 | 000002DB | 7406                      | 	je     LSR_08
   340 | 000002DD | 89F0                      | 	mov    ax,si
   341 | 000002DF | 89FA                      | 	mov    dx,di
   342 | 000002E1 | D1EB                      | 	shr    bx,1
   343 |          |                           | LSR_08:
   344 | 000002E3 | F7C30400                  | 	test   bx,0004h
   345 | 000002E7 | 7407                      | 	je     LSR_09
   346 | 000002E9 | F7DA                      | 	neg    dx
   347 | 000002EB | F7D8                      | 	neg    ax
   348 | 000002ED | 83DA00                    | 	sbb    dx,0000
   349 |          |                           | LSR_09:
   350 | 000002F0 | 5F                        | 	pop    di
   351 | 000002F1 | 5E                        | 	pop    si
   352 | 000002F2 | 5D                        | 	pop    bp
   353 | 000002F3 | CA0800                    | 	retf   0008
   354 |          |                           | LSR_10:
   355 | 000002F6 | F7F3                      | 	div    bx
   356 | 000002F8 | F7C70200                  | 	test   di,0002
   357 | 000002FC | 7401                      | 	je     LSR_11
   358 | 000002FE | 92                        | 	xchg   dx,ax
   359 |          |                           | LSR_11:
   360 | 000002FF | 31D2                      | 	xor    dx,dx
   361 | 00000301 | EBED                      | 	jmp    LSR_09
   362 |          |                           | SR_lshl:	; N_LXLSH@
   363 |          |                           | SR_ulshl:
   364 |          |                           | 	; r = a << b
   365 | 00000303 | 5B                        | 	pop    bx
   366 | 00000304 | 0E                        | 	push   cs
   367 | 00000305 | 53                        | 	push   bx
   368 |          |                           | 
   369 | 00000306 | 55                        | 	push   bp
   370 | 00000307 | 89E5                      | 	mov    bp,sp
   371 |          |                           | 
   372 | 00000309 | 51                        | 	push   cx	; C86 doesn't expect use of cx or bx
   373 |          |                           | 
   374 | 0000030A | 8B4606                    | 	mov    ax, [bp+6]	; pop loword(a)
   375 | 0000030D | 8B5608                    | 	mov    dx, [bp+8]	; pop hiword(a)
   376 | 00000310 | 8B4E0A                    | 	mov    cx, [bp+10]	; pop word(b)
   377 |          |                           | 	
   378 |          |                           | 	; LXLSH@
   379 | 00000313 | 80F910                    | 	cmp    cl,10h
   380 | 00000316 | 7312                      | 	jnb    LSR_12
   381 | 00000318 | 89C3                      | 	mov    bx,ax
   382 | 0000031A | D3E0                      | 	shl    ax,cl
   383 | 0000031C | D3E2                      | 	shl    dx,cl
   384 | 0000031E | F6D9                      | 	neg    cl
   385 | 00000320 | 80C110                    | 	add    cl,10h
   386 | 00000323 | D3EB                      | 	shr    bx,cl
   387 | 00000325 | 09DA                      | 	or     dx,bx
   388 | 00000327 | 59                        | 	pop    cx
   389 | 00000328 | 5D                        | 	pop    bp
   390 | 00000329 | CB                        | 	retf
   391 |          |                           | LSR_12:
   392 | 0000032A | 80E910                    | 	sub    cl,10h
   393 | 0000032D | 92                        | 	xchg   dx,ax
   394 | 0000032E | 31C0                      | 	xor    ax,ax
   395 | 00000330 | D3E2                      | 	shl    dx,cl
   396 | 00000332 | 59                        | 	pop    cx
   397 | 00000333 | 5D                        | 	pop    bp
   398 | 00000334 | CB                        | 	retf
   399 |          |                           | SR_lshr:	; N_LXRSH@
   400 |          |                           | 	; r = a >> b
   401 | 00000335 | 5B                        | 	pop    bx
   402 | 00000336 | 0E                        | 	push   cs
   403 | 00000337 | 53                        | 	push   bx
   404 |          |                           | 
   405 | 00000338 | 55                        | 	push   bp
   406 | 00000339 | 89E5                      | 	mov    bp,sp
   407 |          |                           | 
   408 | 0000033B | 51                        | 	push   cx	; C86 doesn't expect use of cx or bx
   409 |          |                           | 
   410 | 0000033C | 8B4606                    |         mov    ax, [bp+6]	; pop loword(a)
   411 | 0000033F | 8B5608                    | 	mov    dx, [bp+8]	; pop hiword(a)
   412 | 00000342 | 8B4E0A                    | 	mov    cx, [bp+10]	; pop word(b)
   413 |          |                           | 	
   414 |          |                           | 	; LXRSH@
   415 | 00000345 | 80F910                    | 	cmp    cl,10h
   416 | 00000348 | 7312                      | 	jnb    LSR_13
   417 | 0000034A | 89D3                      | 	mov    bx,dx
   418 | 0000034C | D3E8                      | 	shr    ax,cl
   419 | 0000034E | D3FA                      | 	sar    dx,cl
   420 | 00000350 | F6D9                      | 	neg    cl
   421 | 00000352 | 80C110                    | 	add    cl,10h
   422 | 00000355 | D3E3                      | 	shl    bx,cl
   423 | 00000357 | 09D8                      | 	or     ax,bx
   424 | 00000359 | 59                        | 	pop    cx
   425 | 0000035A | 5D                        | 	pop    bp
   426 | 0000035B | CB                        | 	retf
   427 |          |                           | LSR_13:
   428 | 0000035C | 80E910                    | 	sub    cl,10h
   429 | 0000035F | 92                        | 	xchg   dx,ax
   430 | 00000360 | 99                        | 	cwd
   431 | 00000361 | D3F8                      | 	sar    ax,cl
   432 | 00000363 | 59                        | 	pop    cx
   433 | 00000364 | 5D                        | 	pop    bp
   434 | 00000365 | CB                        | 	retf
   435 |          |                           | SR_ulshr:	; N_LXURSH@
   436 |          |                           | 	; r = a >> b
   437 | 00000366 | 5B                        | 	pop    bx
   438 | 00000367 | 0E                        | 	push   cs
   439 | 00000368 | 53                        | 	push   bx
   440 |          |                           | 
   441 | 00000369 | 55                        | 	push   bp
   442 | 0000036A | 89E5                      | 	mov    bp,sp
   443 |          |                           | 
   444 | 0000036C | 51                        | 	push   cx	; C86 doesn't expect use of cx or bx
   445 |          |                           | 
   446 | 0000036D | 8B4606                    |         mov    ax, [bp+6]	; pop loword(a)
   447 | 00000370 | 8B5608                    | 	mov    dx, [bp+8]	; pop hiword(a)
   448 | 00000373 | 8B4E0A                    | 	mov    cx, [bp+10]	; pop word(b)
   449 |          |                           | 	
   450 |          |                           | 	; LXURSH@
   451 | 00000376 | 80F910                    | 	cmp    cl,10h
   452 | 00000379 | 7312                      | 	jnb    LSR_14
   453 | 0000037B | 89D3                      | 	mov    bx,dx
   454 | 0000037D | D3E8                      | 	shr    ax,cl
   455 | 0000037F | D3EA                      | 	shr    dx,cl
   456 | 00000381 | F6D9                      | 	neg    cl
   457 | 00000383 | 80C110                    | 	add    cl,10h
   458 | 00000386 | D3E3                      | 	shl    bx,cl
   459 | 00000388 | 09D8                      | 	or     ax,bx
   460 | 0000038A | 59                        | 	pop    cx
   461 | 0000038B | 5D                        | 	pop    bp
   462 | 0000038C | CB                        | 	retf
   463 |          |                           | LSR_14:
   464 | 0000038D | 80E910                    | 	sub    cl,10h
   465 | 00000390 | 92                        | 	xchg   dx,ax
   466 | 00000391 | 31D2                      | 	xor    dx,dx
   467 | 00000393 | D3E8                      | 	shr    ax,cl
   468 | 00000395 | 59                        | 	pop    cx
   469 | 00000396 | 5D                        | 	pop    bp
   470 | 00000397 | CB                        | 	retf
   471 |          |                           | SR_lmul:	; N_LXMUL@
   472 |          |                           | SR_ulmul:
   473 |          |                           | 	; r = a * b
   474 | 00000398 | 55                        | 	push   bp
   475 | 00000399 | 56                        | 	push   si
   476 | 0000039A | 89E5                      | 	mov    bp,sp
   477 |          |                           | 
   478 | 0000039C | 51                        | 	push   cx	; C86 doesn't expect use of cx or bx
   479 | 0000039D | 53                        | 	push   bx
   480 |          |                           | 
   481 | 0000039E | 8B5E06                    |         mov    bx, [bp+6]	; pop loword(a)
   482 | 000003A1 | 8B4E08                    | 	mov    cx, [bp+8]	; pop hiword(a)
   483 | 000003A4 | 8B460A                    | 	mov    ax, [bp+10]	; pop loword(b)
   484 | 000003A7 | 8B560C                    | 	mov    dx, [bp+12]	; pop hiword(b)
   485 |          |                           | 	
   486 | 000003AA | 96                        | 	xchg   si,ax
   487 | 000003AB | 92                        | 	xchg   dx,ax
   488 | 000003AC | 85C0                      | 	test   ax,ax
   489 | 000003AE | 7402                      | 	je     LSR_15
   490 | 000003B0 | F7E3                      | 	mul    bx
   491 |          |                           | LSR_15:
   492 | 000003B2 | E305                      | 	jcxz   LSR_16
   493 | 000003B4 | 91                        | 	xchg   cx,ax
   494 | 000003B5 | F7E6                      | 	mul    si
   495 | 000003B7 | 01C8                      | 	add    ax,cx
   496 |          |                           | LSR_16:
   497 | 000003B9 | 96                        | 	xchg   si,ax
   498 | 000003BA | F7E3                      | 	mul    bx
   499 | 000003BC | 01F2                      | 	add    dx,si
   500 | 000003BE | 5B                        | 	pop    bx
   501 | 000003BF | 59                        | 	pop    cx
   502 | 000003C0 | 5E                        | 	pop    si
   503 | 000003C1 | 5D                        | 	pop    bp
   504 | 000003C2 | C3                        | 	ret
   505 |          |                           | 
   506 |          |                           | ; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
   507 |          |                           | 	CPU	8086
   508 | 000003C3 | 90                        | 	ALIGN	2
   509 | 000003C4 | E9DB0A                    | 	jmp	main	; Jump to program start
   510 |          |                           | new_line:
   511 | 000003C7 | 0D0A24                    | 	db	13,10,36
   512 |          |                           | 	ALIGN	2
   513 |          |                           | signalEOI:
   514 | 000003CA | EB08                      | 	jmp	L_clib_1
   515 |          |                           | L_clib_2:
   516 | 000003CC | B020                      | 	mov	al, 0x20
   517 | 000003CE | E620                      | 	out	0x20, al
   518 | 000003D0 | 89EC                      | 	mov	sp, bp
   519 | 000003D2 | 5D                        | 	pop	bp
   520 | 000003D3 | C3                        | 	ret
   521 |          |                           | L_clib_1:
   522 | 000003D4 | 55                        | 	push	bp
   523 | 000003D5 | 89E5                      | 	mov	bp, sp
   524 | 000003D7 | EBF3                      | 	jmp	L_clib_2
   525 | 000003D9 | 90                        | 	ALIGN	2
   526 |          |                           | exit:
   527 | 000003DA | EB0B                      | 	jmp	L_clib_4
   528 |          |                           | L_clib_5:
   529 | 000003DC | B44C                      | 	mov	ah, 4Ch
   530 | 000003DE | 8A4604                    | 	mov	al, [bp+4]
   531 | 000003E1 | CD21                      | 	int	21h
   532 | 000003E3 | 89EC                      | 	mov	sp, bp
   533 | 000003E5 | 5D                        | 	pop	bp
   534 | 000003E6 | C3                        | 	ret
   535 |          |                           | L_clib_4:
   536 | 000003E7 | 55                        | 	push	bp
   537 | 000003E8 | 89E5                      | 	mov	bp, sp
   538 | 000003EA | EBF0                      | 	jmp	L_clib_5
   539 |          |                           | 	ALIGN	2
   540 |          |                           | print:
   541 | 000003EC | EB11                      | 	jmp	L_clib_7
   542 |          |                           | L_clib_8:
   543 | 000003EE | B440                      | 	mov	ah, 40h
   544 | 000003F0 | BB0100                    | 	mov	bx, 1
   545 | 000003F3 | 8B4E06                    | 	mov	cx, [bp+6]
   546 | 000003F6 | 8B5604                    | 	mov	dx, [bp+4]
   547 | 000003F9 | CD21                      | 	int	21h
   548 | 000003FB | 89EC                      | 	mov	sp, bp
   549 | 000003FD | 5D                        | 	pop	bp
   550 | 000003FE | C3                        | 	ret
   551 |          |                           | L_clib_7:
   552 | 000003FF | 55                        | 	push	bp
   553 | 00000400 | 89E5                      | 	mov	bp, sp
   554 | 00000402 | EBEA                      | 	jmp	L_clib_8
   555 |          |                           | 	ALIGN	2
   556 |          |                           | printChar:
   557 | 00000404 | EB0B                      | 	jmp	L_clib_10
   558 |          |                           | L_clib_11:
   559 | 00000406 | B402                      | 	mov	ah, 2
   560 | 00000408 | 8A5604                    | 	mov	dl, [bp+4]
   561 | 0000040B | CD21                      | 	int	21h
   562 | 0000040D | 89EC                      | 	mov	sp, bp
   563 | 0000040F | 5D                        | 	pop	bp
   564 | 00000410 | C3                        | 	ret
   565 |          |                           | L_clib_10:
   566 | 00000411 | 55                        | 	push	bp
   567 | 00000412 | 89E5                      | 	mov	bp, sp
   568 | 00000414 | EBF0                      | 	jmp	L_clib_11
   569 |          |                           | 	ALIGN	2
   570 |          |                           | printNewLine:
   571 | 00000416 | EB0B                      | 	jmp	L_clib_13
   572 |          |                           | L_clib_14:
   573 | 00000418 | B409                      | 	mov	ah, 9
   574 | 0000041A | BA[C703]                  | 	mov	dx, new_line
   575 | 0000041D | CD21                      | 	int	21h
   576 | 0000041F | 89EC                      | 	mov	sp, bp
   577 | 00000421 | 5D                        | 	pop	bp
   578 | 00000422 | C3                        | 	ret
   579 |          |                           | L_clib_13:
   580 | 00000423 | 55                        | 	push	bp
   581 | 00000424 | 89E5                      | 	mov	bp, sp
   582 | 00000426 | EBF0                      | 	jmp	L_clib_14
   583 |          |                           | 	ALIGN	2
   584 |          |                           | printString:
   585 | 00000428 | EB1C                      | 	jmp	L_clib_16
   586 |          |                           | L_clib_17:
   587 | 0000042A | 31F6                      | 	xor	si,si
   588 | 0000042C | 8B5E04                    | 	mov	bx, [bp+4]
   589 | 0000042F | EB01                      | 	jmp	printString2
   590 |          |                           | 	printString1:
   591 | 00000431 | 46                        | 	inc	si
   592 |          |                           | 	printString2:
   593 | 00000432 | 803800                    | 	cmp	byte [bx+si],0
   594 | 00000435 | 75FA                      | 	jne	printString1
   595 | 00000437 | 89DA                      | 	mov	dx, bx
   596 | 00000439 | 89F1                      | 	mov	cx, si
   597 | 0000043B | B440                      | 	mov	ah, 40h
   598 | 0000043D | BB0100                    | 	mov	bx, 1
   599 | 00000440 | CD21                      | 	int	21h
   600 | 00000442 | 89EC                      | 	mov	sp, bp
   601 | 00000444 | 5D                        | 	pop	bp
   602 | 00000445 | C3                        | 	ret
   603 |          |                           | L_clib_16:
   604 | 00000446 | 55                        | 	push	bp
   605 | 00000447 | 89E5                      | 	mov	bp, sp
   606 | 00000449 | 51                        | 	push	cx
   607 | 0000044A | EBDE                      | 	jmp	L_clib_17
   608 |          |                           | 	ALIGN	2
   609 |          |                           | printInt:
   610 | 0000044C | E99500                    | 	jmp	L_clib_19
   611 |          |                           | L_clib_20:
   612 | 0000044F | C746FE0000                | 	mov	word [bp-2], 0
   613 | 00000454 | C746FC1027                | 	mov	word [bp-4], 10000
   614 | 00000459 | 837E0400                  | 	cmp	word [bp+4], 0
   615 | 0000045D | 7D0F                      | 	jge	L_clib_21
   616 | 0000045F | C646F62D                  | 	mov	byte [bp-10], 45
   617 | 00000463 | FF46FE                    | 	inc	word [bp-2]
   618 | 00000466 | 8B4604                    | 	mov	ax, word [bp+4]
   619 | 00000469 | F7D8                      | 	neg	ax
   620 | 0000046B | 894604                    | 	mov	word [bp+4], ax
   621 |          |                           | L_clib_21:
   622 | 0000046E | 8B4604                    | 	mov	ax, word [bp+4]
   623 | 00000471 | 85C0                      | 	test	ax, ax
   624 | 00000473 | 7507                      | 	jne	L_clib_22
   625 | 00000475 | C746FC0100                | 	mov	word [bp-4], 1
   626 | 0000047A | EB19                      | 	jmp	L_clib_23
   627 |          |                           | L_clib_22:
   628 | 0000047C | EB0C                      | 	jmp	L_clib_25
   629 |          |                           | L_clib_24:
   630 | 0000047E | 8B46FC                    | 	mov	ax, word [bp-4]
   631 | 00000481 | 99                        | 	cwd
   632 | 00000482 | B90A00                    | 	mov	cx, 10
   633 | 00000485 | F7F9                      | 	idiv	cx
   634 | 00000487 | 8946FC                    | 	mov	word [bp-4], ax
   635 |          |                           | L_clib_25:
   636 | 0000048A | 8B4604                    | 	mov	ax, word [bp+4]
   637 | 0000048D | 99                        | 	cwd
   638 | 0000048E | F77EFC                    | 	idiv	word [bp-4]
   639 | 00000491 | 85C0                      | 	test	ax, ax
   640 | 00000493 | 74E9                      | 	je	L_clib_24
   641 |          |                           | L_clib_26:
   642 |          |                           | L_clib_23:
   643 | 00000495 | EB36                      | 	jmp	L_clib_28
   644 |          |                           | L_clib_27:
   645 | 00000497 | 8B4604                    | 	mov	ax, word [bp+4]
   646 | 0000049A | 31D2                      | 	xor	dx, dx
   647 | 0000049C | F776FC                    | 	div	word [bp-4]
   648 | 0000049F | 0430                      | 	add	al, 48
   649 | 000004A1 | 8B76FE                    | 	mov	si, word [bp-2]
   650 | 000004A4 | 8D56F6                    | 	lea	dx, [bp-10]
   651 | 000004A7 | 01D6                      | 	add	si, dx
   652 | 000004A9 | 8804                      | 	mov	byte [si], al
   653 | 000004AB | FF46FE                    | 	inc	word [bp-2]
   654 | 000004AE | 8B4604                    | 	mov	ax, word [bp+4]
   655 | 000004B1 | 31D2                      | 	xor	dx, dx
   656 | 000004B3 | F776FC                    | 	div	word [bp-4]
   657 | 000004B6 | 89D0                      | 	mov	ax, dx
   658 | 000004B8 | 894604                    | 	mov	word [bp+4], ax
   659 | 000004BB | 8B46FC                    | 	mov	ax, word [bp-4]
   660 | 000004BE | 99                        | 	cwd
   661 | 000004BF | B90A00                    | 	mov	cx, 10
   662 | 000004C2 | F7F9                      | 	idiv	cx
   663 | 000004C4 | 8946FC                    | 	mov	word [bp-4], ax
   664 | 000004C7 | 8B46FC                    | 	mov	ax, word [bp-4]
   665 | 000004CA | 8946FC                    | 	mov	word [bp-4], ax
   666 |          |                           | L_clib_28:
   667 | 000004CD | 837EFC00                  | 	cmp	word [bp-4], 0
   668 | 000004D1 | 7FC4                      | 	jg	L_clib_27
   669 |          |                           | L_clib_29:
   670 | 000004D3 | FF76FE                    | 	push	word [bp-2]
   671 | 000004D6 | 8D46F6                    | 	lea	ax, [bp-10]
   672 | 000004D9 | 50                        | 	push	ax
   673 | 000004DA | E80FFF                    | 	call	print
   674 | 000004DD | 83C404                    | 	add	sp, 4
   675 | 000004E0 | 89EC                      | 	mov	sp, bp
   676 | 000004E2 | 5D                        | 	pop	bp
   677 | 000004E3 | C3                        | 	ret
   678 |          |                           | L_clib_19:
   679 | 000004E4 | 55                        | 	push	bp
   680 | 000004E5 | 89E5                      | 	mov	bp, sp
   681 | 000004E7 | 83EC0A                    | 	sub	sp, 10
   682 | 000004EA | E962FF                    | 	jmp	L_clib_20
   683 | 000004ED | 90                        | 	ALIGN	2
   684 |          |                           | printLong:
   685 | 000004EE | E9D200                    | 	jmp	L_clib_31
   686 |          |                           | L_clib_32:
   687 | 000004F1 | C746FE0000                | 	mov	word [bp-2], 0
   688 | 000004F6 | C746FA00CA                | 	mov	word [bp-6], 51712
   689 | 000004FB | C746FC9A3B                | 	mov	word [bp-4], 15258
   690 | 00000500 | 837E0600                  | 	cmp	word [bp+6], 0
   691 | 00000504 | 7F22                      | 	jg	L_clib_33
   692 | 00000506 | 7C06                      | 	jl	L_clib_34
   693 | 00000508 | 837E0400                  | 	cmp	word [bp+4], 0
   694 | 0000050C | 731A                      | 	jae	L_clib_33
   695 |          |                           | L_clib_34:
   696 | 0000050E | C646EF2D                  | 	mov	byte [bp-17], 45
   697 | 00000512 | FF46FE                    | 	inc	word [bp-2]
   698 | 00000515 | 8B4604                    | 	mov	ax, word [bp+4]
   699 | 00000518 | 8B5606                    | 	mov	dx, word [bp+6]
   700 | 0000051B | F7D8                      | 	neg	ax
   701 | 0000051D | 83D200                    | 	adc	dx, 0
   702 | 00000520 | F7DA                      | 	neg	dx
   703 | 00000522 | 894604                    | 	mov	word [bp+4], ax
   704 | 00000525 | 895606                    | 	mov	word [bp+6], dx
   705 |          |                           | L_clib_33:
   706 | 00000528 | 8B4604                    | 	mov	ax, word [bp+4]
   707 | 0000052B | 8B5606                    | 	mov	dx, word [bp+6]
   708 | 0000052E | 09C2                      | 	or	dx, ax
   709 | 00000530 | 750C                      | 	jne	L_clib_35
   710 | 00000532 | C746FA0100                | 	mov	word [bp-6], 1
   711 | 00000537 | C746FC0000                | 	mov	word [bp-4], 0
   712 | 0000053C | EB23                      | 	jmp	L_clib_36
   713 |          |                           | L_clib_35:
   714 | 0000053E | EB0E                      | 	jmp	L_clib_38
   715 |          |                           | L_clib_37:
   716 | 00000540 | B80A00                    | 	mov	ax, 10
   717 | 00000543 | 31D2                      | 	xor	dx, dx
   718 | 00000545 | 52                        | 	push	dx
   719 | 00000546 | 50                        | 	push	ax
   720 | 00000547 | 8D46FA                    | 	lea	ax, [bp-6]
   721 | 0000054A | 50                        | 	push	ax
   722 | 0000054B | E8B5FB                    | 	call	SR_asldiv
   723 |          |                           | L_clib_38:
   724 | 0000054E | FF76FC                    | 	push	word [bp-4]
   725 | 00000551 | FF76FA                    | 	push	word [bp-6]
   726 | 00000554 | FF7606                    | 	push	word [bp+6]
   727 | 00000557 | FF7604                    | 	push	word [bp+4]
   728 | 0000055A | E8F8FC                    | 	call	SR_ldiv
   729 | 0000055D | 09C2                      | 	or	dx, ax
   730 | 0000055F | 74DF                      | 	je	L_clib_37
   731 |          |                           | L_clib_39:
   732 |          |                           | L_clib_36:
   733 | 00000561 | EB41                      | 	jmp	L_clib_41
   734 |          |                           | L_clib_40:
   735 | 00000563 | FF76FC                    | 	push	word [bp-4]
   736 | 00000566 | FF76FA                    | 	push	word [bp-6]
   737 | 00000569 | FF7606                    | 	push	word [bp+6]
   738 | 0000056C | FF7604                    | 	push	word [bp+4]
   739 | 0000056F | E8EAFC                    | 	call	SR_uldiv
   740 | 00000572 | 0430                      | 	add	al, 48
   741 | 00000574 | 8B76FE                    | 	mov	si, word [bp-2]
   742 | 00000577 | 8D56EF                    | 	lea	dx, [bp-17]
   743 | 0000057A | 01D6                      | 	add	si, dx
   744 | 0000057C | 8804                      | 	mov	byte [si], al
   745 | 0000057E | FF46FE                    | 	inc	word [bp-2]
   746 | 00000581 | FF76FC                    | 	push	word [bp-4]
   747 | 00000584 | FF76FA                    | 	push	word [bp-6]
   748 | 00000587 | FF7606                    | 	push	word [bp+6]
   749 | 0000058A | FF7604                    | 	push	word [bp+4]
   750 | 0000058D | E8D4FC                    | 	call	SR_lmod
   751 | 00000590 | 894604                    | 	mov	word [bp+4], ax
   752 | 00000593 | 895606                    | 	mov	word [bp+6], dx
   753 | 00000596 | B80A00                    | 	mov	ax, 10
   754 | 00000599 | 31D2                      | 	xor	dx, dx
   755 | 0000059B | 52                        | 	push	dx
   756 | 0000059C | 50                        | 	push	ax
   757 | 0000059D | 8D46FA                    | 	lea	ax, [bp-6]
   758 | 000005A0 | 50                        | 	push	ax
   759 | 000005A1 | E85FFB                    | 	call	SR_asldiv
   760 |          |                           | L_clib_41:
   761 | 000005A4 | 837EFC00                  | 	cmp	word [bp-4], 0
   762 | 000005A8 | 7FB9                      | 	jg	L_clib_40
   763 | 000005AA | 7506                      | 	jne	L_clib_43
   764 | 000005AC | 837EFA00                  | 	cmp	word [bp-6], 0
   765 | 000005B0 | 77B1                      | 	ja	L_clib_40
   766 |          |                           | L_clib_43:
   767 |          |                           | L_clib_42:
   768 | 000005B2 | FF76FE                    | 	push	word [bp-2]
   769 | 000005B5 | 8D46EF                    | 	lea	ax, [bp-17]
   770 | 000005B8 | 50                        | 	push	ax
   771 | 000005B9 | E830FE                    | 	call	print
   772 | 000005BC | 83C404                    | 	add	sp, 4
   773 | 000005BF | 89EC                      | 	mov	sp, bp
   774 | 000005C1 | 5D                        | 	pop	bp
   775 | 000005C2 | C3                        | 	ret
   776 |          |                           | L_clib_31:
   777 | 000005C3 | 55                        | 	push	bp
   778 | 000005C4 | 89E5                      | 	mov	bp, sp
   779 | 000005C6 | 83EC12                    | 	sub	sp, 18
   780 | 000005C9 | E925FF                    | 	jmp	L_clib_32
   781 |          |                           | 	ALIGN	2
   782 |          |                           | printUInt:
   783 | 000005CC | EB7C                      | 	jmp	L_clib_45
   784 |          |                           | L_clib_46:
   785 | 000005CE | C746FE0000                | 	mov	word [bp-2], 0
   786 | 000005D3 | C746FC1027                | 	mov	word [bp-4], 10000
   787 | 000005D8 | 8B4604                    | 	mov	ax, word [bp+4]
   788 | 000005DB | 85C0                      | 	test	ax, ax
   789 | 000005DD | 7507                      | 	jne	L_clib_47
   790 | 000005DF | C746FC0100                | 	mov	word [bp-4], 1
   791 | 000005E4 | EB1B                      | 	jmp	L_clib_48
   792 |          |                           | L_clib_47:
   793 | 000005E6 | EB0D                      | 	jmp	L_clib_50
   794 |          |                           | L_clib_49:
   795 | 000005E8 | 8B46FC                    | 	mov	ax, word [bp-4]
   796 | 000005EB | 31D2                      | 	xor	dx, dx
   797 | 000005ED | B90A00                    | 	mov	cx, 10
   798 | 000005F0 | F7F1                      | 	div	cx
   799 | 000005F2 | 8946FC                    | 	mov	word [bp-4], ax
   800 |          |                           | L_clib_50:
   801 | 000005F5 | 8B4604                    | 	mov	ax, word [bp+4]
   802 | 000005F8 | 31D2                      | 	xor	dx, dx
   803 | 000005FA | F776FC                    | 	div	word [bp-4]
   804 | 000005FD | 85C0                      | 	test	ax, ax
   805 | 000005FF | 74E7                      | 	je	L_clib_49
   806 |          |                           | L_clib_51:
   807 |          |                           | L_clib_48:
   808 | 00000601 | EB2F                      | 	jmp	L_clib_53
   809 |          |                           | L_clib_52:
   810 | 00000603 | 8B4604                    | 	mov	ax, word [bp+4]
   811 | 00000606 | 31D2                      | 	xor	dx, dx
   812 | 00000608 | F776FC                    | 	div	word [bp-4]
   813 | 0000060B | 0430                      | 	add	al, 48
   814 | 0000060D | 8B76FE                    | 	mov	si, word [bp-2]
   815 | 00000610 | 8D56F6                    | 	lea	dx, [bp-10]
   816 | 00000613 | 01D6                      | 	add	si, dx
   817 | 00000615 | 8804                      | 	mov	byte [si], al
   818 | 00000617 | FF46FE                    | 	inc	word [bp-2]
   819 | 0000061A | 8B4604                    | 	mov	ax, word [bp+4]
   820 | 0000061D | 31D2                      | 	xor	dx, dx
   821 | 0000061F | F776FC                    | 	div	word [bp-4]
   822 | 00000622 | 895604                    | 	mov	word [bp+4], dx
   823 | 00000625 | 8B46FC                    | 	mov	ax, word [bp-4]
   824 | 00000628 | 31D2                      | 	xor	dx, dx
   825 | 0000062A | B90A00                    | 	mov	cx, 10
   826 | 0000062D | F7F1                      | 	div	cx
   827 | 0000062F | 8946FC                    | 	mov	word [bp-4], ax
   828 |          |                           | L_clib_53:
   829 | 00000632 | 8B46FC                    | 	mov	ax, word [bp-4]
   830 | 00000635 | 85C0                      | 	test	ax, ax
   831 | 00000637 | 75CA                      | 	jne	L_clib_52
   832 |          |                           | L_clib_54:
   833 | 00000639 | FF76FE                    | 	push	word [bp-2]
   834 | 0000063C | 8D46F6                    | 	lea	ax, [bp-10]
   835 | 0000063F | 50                        | 	push	ax
   836 | 00000640 | E8A9FD                    | 	call	print
   837 | 00000643 | 83C404                    | 	add	sp, 4
   838 | 00000646 | 89EC                      | 	mov	sp, bp
   839 | 00000648 | 5D                        | 	pop	bp
   840 | 00000649 | C3                        | 	ret
   841 |          |                           | L_clib_45:
   842 | 0000064A | 55                        | 	push	bp
   843 | 0000064B | 89E5                      | 	mov	bp, sp
   844 | 0000064D | 83EC0A                    | 	sub	sp, 10
   845 | 00000650 | E97BFF                    | 	jmp	L_clib_46
   846 | 00000653 | 90                        | 	ALIGN	2
   847 |          |                           | printULong:
   848 | 00000654 | E99E00                    | 	jmp	L_clib_56
   849 |          |                           | L_clib_57:
   850 | 00000657 | C746FE0000                | 	mov	word [bp-2], 0
   851 | 0000065C | C746FA00CA                | 	mov	word [bp-6], 51712
   852 | 00000661 | C746FC9A3B                | 	mov	word [bp-4], 15258
   853 | 00000666 | 8B4604                    | 	mov	ax, word [bp+4]
   854 | 00000669 | 8B5606                    | 	mov	dx, word [bp+6]
   855 | 0000066C | 09C2                      | 	or	dx, ax
   856 | 0000066E | 750C                      | 	jne	L_clib_58
   857 | 00000670 | C746FA0100                | 	mov	word [bp-6], 1
   858 | 00000675 | C746FC0000                | 	mov	word [bp-4], 0
   859 | 0000067A | EB23                      | 	jmp	L_clib_59
   860 |          |                           | L_clib_58:
   861 | 0000067C | EB0E                      | 	jmp	L_clib_61
   862 |          |                           | L_clib_60:
   863 | 0000067E | B80A00                    | 	mov	ax, 10
   864 | 00000681 | 31D2                      | 	xor	dx, dx
   865 | 00000683 | 52                        | 	push	dx
   866 | 00000684 | 50                        | 	push	ax
   867 | 00000685 | 8D46FA                    | 	lea	ax, [bp-6]
   868 | 00000688 | 50                        | 	push	ax
   869 | 00000689 | E820FB                    | 	call	SR_asuldiv
   870 |          |                           | L_clib_61:
   871 | 0000068C | FF76FC                    | 	push	word [bp-4]
   872 | 0000068F | FF76FA                    | 	push	word [bp-6]
   873 | 00000692 | FF7606                    | 	push	word [bp+6]
   874 | 00000695 | FF7604                    | 	push	word [bp+4]
   875 | 00000698 | E8C1FB                    | 	call	SR_uldiv
   876 | 0000069B | 09C2                      | 	or	dx, ax
   877 | 0000069D | 74DF                      | 	je	L_clib_60
   878 |          |                           | L_clib_62:
   879 |          |                           | L_clib_59:
   880 | 0000069F | EB39                      | 	jmp	L_clib_64
   881 |          |                           | L_clib_63:
   882 | 000006A1 | FF76FC                    | 	push	word [bp-4]
   883 | 000006A4 | FF76FA                    | 	push	word [bp-6]
   884 | 000006A7 | FF7606                    | 	push	word [bp+6]
   885 | 000006AA | FF7604                    | 	push	word [bp+4]
   886 | 000006AD | E8ACFB                    | 	call	SR_uldiv
   887 | 000006B0 | 0430                      | 	add	al, 48
   888 | 000006B2 | 8B76FE                    | 	mov	si, word [bp-2]
   889 | 000006B5 | 8D56EF                    | 	lea	dx, [bp-17]
   890 | 000006B8 | 01D6                      | 	add	si, dx
   891 | 000006BA | 8804                      | 	mov	byte [si], al
   892 | 000006BC | FF46FE                    | 	inc	word [bp-2]
   893 | 000006BF | FF76FC                    | 	push	word [bp-4]
   894 | 000006C2 | FF76FA                    | 	push	word [bp-6]
   895 | 000006C5 | 8D4604                    | 	lea	ax, [bp+4]
   896 | 000006C8 | 50                        | 	push	ax
   897 | 000006C9 | E800FB                    | 	call	SR_asilmod
   898 | 000006CC | B80A00                    | 	mov	ax, 10
   899 | 000006CF | 31D2                      | 	xor	dx, dx
   900 | 000006D1 | 52                        | 	push	dx
   901 | 000006D2 | 50                        | 	push	ax
   902 | 000006D3 | 8D46FA                    | 	lea	ax, [bp-6]
   903 | 000006D6 | 50                        | 	push	ax
   904 | 000006D7 | E8D2FA                    | 	call	SR_asuldiv
   905 |          |                           | L_clib_64:
   906 | 000006DA | 8B46FA                    | 	mov	ax, word [bp-6]
   907 | 000006DD | 8B56FC                    | 	mov	dx, word [bp-4]
   908 | 000006E0 | 09C2                      | 	or	dx, ax
   909 | 000006E2 | 75BD                      | 	jne	L_clib_63
   910 |          |                           | L_clib_65:
   911 | 000006E4 | FF76FE                    | 	push	word [bp-2]
   912 | 000006E7 | 8D46EF                    | 	lea	ax, [bp-17]
   913 | 000006EA | 50                        | 	push	ax
   914 | 000006EB | E8FEFC                    | 	call	print
   915 | 000006EE | 83C404                    | 	add	sp, 4
   916 | 000006F1 | 89EC                      | 	mov	sp, bp
   917 | 000006F3 | 5D                        | 	pop	bp
   918 | 000006F4 | C3                        | 	ret
   919 |          |                           | L_clib_56:
   920 | 000006F5 | 55                        | 	push	bp
   921 | 000006F6 | 89E5                      | 	mov	bp, sp
   922 | 000006F8 | 83EC12                    | 	sub	sp, 18
   923 | 000006FB | E959FF                    | 	jmp	L_clib_57
   924 |          |                           | 	ALIGN	2
   925 |          |                           | printByte:
   926 | 000006FE | EB61                      | 	jmp	L_clib_67
   927 |          |                           | L_clib_68:
   928 | 00000700 | 8A4604                    | 	mov	al, byte [bp+4]
   929 | 00000703 | 98                        | 	cbw
   930 | 00000704 | B90400                    | 	mov	cx, 4
   931 | 00000707 | D3F8                      | 	sar	ax, cl
   932 | 00000709 | 83E00F                    | 	and	ax, 15
   933 | 0000070C | 8846FF                    | 	mov	byte [bp-1], al
   934 | 0000070F | 807EFF09                  | 	cmp	byte [bp-1], 9
   935 | 00000713 | 7E0C                      | 	jle	L_clib_69
   936 | 00000715 | 8A46FF                    | 	mov	al, byte [bp-1]
   937 | 00000718 | 98                        | 	cbw
   938 | 00000719 | 83E80A                    | 	sub	ax, 10
   939 | 0000071C | 83C041                    | 	add	ax, 65
   940 | 0000071F | EB07                      | 	jmp	L_clib_70
   941 |          |                           | L_clib_69:
   942 | 00000721 | 8A46FF                    | 	mov	al, byte [bp-1]
   943 | 00000724 | 98                        | 	cbw
   944 | 00000725 | 83C030                    | 	add	ax, 48
   945 |          |                           | L_clib_70:
   946 | 00000728 | 8846FD                    | 	mov	byte [bp-3], al
   947 | 0000072B | 8A4604                    | 	mov	al, byte [bp+4]
   948 | 0000072E | 240F                      | 	and	al, 15
   949 | 00000730 | 8846FF                    | 	mov	byte [bp-1], al
   950 | 00000733 | 807EFF09                  | 	cmp	byte [bp-1], 9
   951 | 00000737 | 7E0C                      | 	jle	L_clib_71
   952 | 00000739 | 8A46FF                    | 	mov	al, byte [bp-1]
   953 | 0000073C | 98                        | 	cbw
   954 | 0000073D | 83E80A                    | 	sub	ax, 10
   955 | 00000740 | 83C041                    | 	add	ax, 65
   956 | 00000743 | EB07                      | 	jmp	L_clib_72
   957 |          |                           | L_clib_71:
   958 | 00000745 | 8A46FF                    | 	mov	al, byte [bp-1]
   959 | 00000748 | 98                        | 	cbw
   960 | 00000749 | 83C030                    | 	add	ax, 48
   961 |          |                           | L_clib_72:
   962 | 0000074C | 8846FE                    | 	mov	byte [bp-2], al
   963 | 0000074F | B80200                    | 	mov	ax, 2
   964 | 00000752 | 50                        | 	push	ax
   965 | 00000753 | 8D46FD                    | 	lea	ax, [bp-3]
   966 | 00000756 | 50                        | 	push	ax
   967 | 00000757 | E892FC                    | 	call	print
   968 | 0000075A | 83C404                    | 	add	sp, 4
   969 | 0000075D | 89EC                      | 	mov	sp, bp
   970 | 0000075F | 5D                        | 	pop	bp
   971 | 00000760 | C3                        | 	ret
   972 |          |                           | L_clib_67:
   973 | 00000761 | 55                        | 	push	bp
   974 | 00000762 | 89E5                      | 	mov	bp, sp
   975 | 00000764 | 83EC04                    | 	sub	sp, 4
   976 | 00000767 | EB97                      | 	jmp	L_clib_68
   977 | 00000769 | 90                        | 	ALIGN	2
   978 |          |                           | printWord:
   979 | 0000076A | EB59                      | 	jmp	L_clib_74
   980 |          |                           | L_clib_75:
   981 | 0000076C | C746FE0300                | 	mov	word [bp-2], 3
   982 | 00000771 | EB3A                      | 	jmp	L_clib_77
   983 |          |                           | L_clib_76:
   984 | 00000773 | 8B4604                    | 	mov	ax, word [bp+4]
   985 | 00000776 | 83E00F                    | 	and	ax, 15
   986 | 00000779 | 8846FD                    | 	mov	byte [bp-3], al
   987 | 0000077C | 807EFD09                  | 	cmp	byte [bp-3], 9
   988 | 00000780 | 7E0C                      | 	jle	L_clib_80
   989 | 00000782 | 8A46FD                    | 	mov	al, byte [bp-3]
   990 | 00000785 | 98                        | 	cbw
   991 | 00000786 | 83E80A                    | 	sub	ax, 10
   992 | 00000789 | 83C041                    | 	add	ax, 65
   993 | 0000078C | EB07                      | 	jmp	L_clib_81
   994 |          |                           | L_clib_80:
   995 | 0000078E | 8A46FD                    | 	mov	al, byte [bp-3]
   996 | 00000791 | 98                        | 	cbw
   997 | 00000792 | 83C030                    | 	add	ax, 48
   998 |          |                           | L_clib_81:
   999 | 00000795 | 8B76FE                    | 	mov	si, word [bp-2]
  1000 | 00000798 | 8D56F9                    | 	lea	dx, [bp-7]
  1001 | 0000079B | 01D6                      | 	add	si, dx
  1002 | 0000079D | 8804                      | 	mov	byte [si], al
  1003 | 0000079F | 8B4604                    | 	mov	ax, word [bp+4]
  1004 | 000007A2 | B90400                    | 	mov	cx, 4
  1005 | 000007A5 | D3F8                      | 	sar	ax, cl
  1006 | 000007A7 | 894604                    | 	mov	word [bp+4], ax
  1007 |          |                           | L_clib_79:
  1008 | 000007AA | FF4EFE                    | 	dec	word [bp-2]
  1009 |          |                           | L_clib_77:
  1010 | 000007AD | 837EFE00                  | 	cmp	word [bp-2], 0
  1011 | 000007B1 | 7DC0                      | 	jge	L_clib_76
  1012 |          |                           | L_clib_78:
  1013 | 000007B3 | B80400                    | 	mov	ax, 4
  1014 | 000007B6 | 50                        | 	push	ax
  1015 | 000007B7 | 8D46F9                    | 	lea	ax, [bp-7]
  1016 | 000007BA | 50                        | 	push	ax
  1017 | 000007BB | E82EFC                    | 	call	print
  1018 | 000007BE | 83C404                    | 	add	sp, 4
  1019 | 000007C1 | 89EC                      | 	mov	sp, bp
  1020 | 000007C3 | 5D                        | 	pop	bp
  1021 | 000007C4 | C3                        | 	ret
  1022 |          |                           | L_clib_74:
  1023 | 000007C5 | 55                        | 	push	bp
  1024 | 000007C6 | 89E5                      | 	mov	bp, sp
  1025 | 000007C8 | 83EC08                    | 	sub	sp, 8
  1026 | 000007CB | EB9F                      | 	jmp	L_clib_75
  1027 | 000007CD | 90                        | 	ALIGN	2
  1028 |          |                           | printDWord:
  1029 | 000007CE | E9AC00                    | 	jmp	L_clib_83
  1030 |          |                           | L_clib_84:
  1031 | 000007D1 | 8D4604                    | 	lea	ax, [bp+4]
  1032 | 000007D4 | 89C6                      | 	mov	si, ax
  1033 | 000007D6 | 8B04                      | 	mov	ax, word [si]
  1034 | 000007D8 | 8946FA                    | 	mov	word [bp-6], ax
  1035 | 000007DB | 8D4604                    | 	lea	ax, [bp+4]
  1036 | 000007DE | 89C6                      | 	mov	si, ax
  1037 | 000007E0 | 83C602                    | 	add	si, 2
  1038 | 000007E3 | 8B04                      | 	mov	ax, word [si]
  1039 | 000007E5 | 8946F8                    | 	mov	word [bp-8], ax
  1040 | 000007E8 | C746FE0300                | 	mov	word [bp-2], 3
  1041 | 000007ED | EB76                      | 	jmp	L_clib_86
  1042 |          |                           | L_clib_85:
  1043 | 000007EF | 8B46FA                    | 	mov	ax, word [bp-6]
  1044 | 000007F2 | 83E00F                    | 	and	ax, 15
  1045 | 000007F5 | 8846FD                    | 	mov	byte [bp-3], al
  1046 | 000007F8 | 807EFD09                  | 	cmp	byte [bp-3], 9
  1047 | 000007FC | 7E0C                      | 	jle	L_clib_89
  1048 | 000007FE | 8A46FD                    | 	mov	al, byte [bp-3]
  1049 | 00000801 | 98                        | 	cbw
  1050 | 00000802 | 83E80A                    | 	sub	ax, 10
  1051 | 00000805 | 83C041                    | 	add	ax, 65
  1052 | 00000808 | EB07                      | 	jmp	L_clib_90
  1053 |          |                           | L_clib_89:
  1054 | 0000080A | 8A46FD                    | 	mov	al, byte [bp-3]
  1055 | 0000080D | 98                        | 	cbw
  1056 | 0000080E | 83C030                    | 	add	ax, 48
  1057 |          |                           | L_clib_90:
  1058 | 00000811 | 8B56FE                    | 	mov	dx, word [bp-2]
  1059 | 00000814 | 83C204                    | 	add	dx, 4
  1060 | 00000817 | 89D6                      | 	mov	si, dx
  1061 | 00000819 | 8D56F0                    | 	lea	dx, [bp-16]
  1062 | 0000081C | 01D6                      | 	add	si, dx
  1063 | 0000081E | 8804                      | 	mov	byte [si], al
  1064 | 00000820 | 8B46FA                    | 	mov	ax, word [bp-6]
  1065 | 00000823 | B90400                    | 	mov	cx, 4
  1066 | 00000826 | D3F8                      | 	sar	ax, cl
  1067 | 00000828 | 8946FA                    | 	mov	word [bp-6], ax
  1068 | 0000082B | 8B46F8                    | 	mov	ax, word [bp-8]
  1069 | 0000082E | 83E00F                    | 	and	ax, 15
  1070 | 00000831 | 8846FD                    | 	mov	byte [bp-3], al
  1071 | 00000834 | 807EFD09                  | 	cmp	byte [bp-3], 9
  1072 | 00000838 | 7E0C                      | 	jle	L_clib_91
  1073 | 0000083A | 8A46FD                    | 	mov	al, byte [bp-3]
  1074 | 0000083D | 98                        | 	cbw
  1075 | 0000083E | 83E80A                    | 	sub	ax, 10
  1076 | 00000841 | 83C041                    | 	add	ax, 65
  1077 | 00000844 | EB07                      | 	jmp	L_clib_92
  1078 |          |                           | L_clib_91:
  1079 | 00000846 | 8A46FD                    | 	mov	al, byte [bp-3]
  1080 | 00000849 | 98                        | 	cbw
  1081 | 0000084A | 83C030                    | 	add	ax, 48
  1082 |          |                           | L_clib_92:
  1083 | 0000084D | 8B76FE                    | 	mov	si, word [bp-2]
  1084 | 00000850 | 8D56F0                    | 	lea	dx, [bp-16]
  1085 | 00000853 | 01D6                      | 	add	si, dx
  1086 | 00000855 | 8804                      | 	mov	byte [si], al
  1087 | 00000857 | 8B46F8                    | 	mov	ax, word [bp-8]
  1088 | 0000085A | B90400                    | 	mov	cx, 4
  1089 | 0000085D | D3F8                      | 	sar	ax, cl
  1090 | 0000085F | 8946F8                    | 	mov	word [bp-8], ax
  1091 |          |                           | L_clib_88:
  1092 | 00000862 | FF4EFE                    | 	dec	word [bp-2]
  1093 |          |                           | L_clib_86:
  1094 | 00000865 | 837EFE00                  | 	cmp	word [bp-2], 0
  1095 | 00000869 | 7D84                      | 	jge	L_clib_85
  1096 |          |                           | L_clib_87:
  1097 | 0000086B | B80800                    | 	mov	ax, 8
  1098 | 0000086E | 50                        | 	push	ax
  1099 | 0000086F | 8D46F0                    | 	lea	ax, [bp-16]
  1100 | 00000872 | 50                        | 	push	ax
  1101 | 00000873 | E876FB                    | 	call	print
  1102 | 00000876 | 83C404                    | 	add	sp, 4
  1103 | 00000879 | 89EC                      | 	mov	sp, bp
  1104 | 0000087B | 5D                        | 	pop	bp
  1105 | 0000087C | C3                        | 	ret
  1106 |          |                           | L_clib_83:
  1107 | 0000087D | 55                        | 	push	bp
  1108 | 0000087E | 89E5                      | 	mov	bp, sp
  1109 | 00000880 | 83EC10                    | 	sub	sp, 16
  1110 | 00000883 | E94BFF                    | 	jmp	L_clib_84
  1111 |          |                           | 
  1112 |          |                           | 
  1113 |          |                           | ; 1    Save the context of whatever was running by pushing all registers onto the stack, except SP, SS, CS, IP, and the flags.
  1114 |          |                           | ; 2    Enable interrupts to allow higher priority IRQs to interrupt.
  1115 |          |                           | ; 3    Run the interrupt handler, which is usually a C function that does the work for this interrupt.
  1116 |          |                           | ; 4    Disable interrupts.
  1117 |          |                           | ; 5    Send the EOI command to the PIC, informing it that the handler is finished.
  1118 |          |                           | ; 6    Restore the context of what was running before the interrupt occurred by popping the registers saved in step 1 off the stack.
  1119 |          |                           | ; 7    Execute the iret instruction. This restores in one atomic operation the values for IP, CS, and the flags, which were automatically saved on the stack by the processor when the interrupt occurred. This effecti
  1120 |          |                           | 
  1121 |          |                           | 
  1122 |          |                           | 
  1123 |          |                           | 
  1124 |          |                           | isr_reset:
  1125 |          |                           | 	; save context
  1126 |          |                           | 	; enable interrupts for higher priority IRQ
  1127 |          |                           | 	; run interrupt handler
  1128 |          |                           | 
  1129 |          |                           | 	; disable interrupts
  1130 |          |                           | 	; sent EOI to PIC
  1131 |          |                           | 	; restore context
  1132 |          |                           | 
  1133 |          |                           | 	; But we don't have to do any of that, because we ARE the highest-priority interrupt
  1134 |          |                           | 	; And it will end the program. So no saving context, no enabling interrupts, 
  1135 |          |                           | 	; and no restoring context.
  1136 | 00000886 | E83D00                    | 	call c_isr_reset
  1137 | 00000889 | CF                        | 	iret	; This should not even happen.
  1138 |          |                           | 
  1139 |          |                           | 
  1140 |          |                           | 
  1141 |          |                           | isr_keypress:
  1142 |          |                           | 		; Save context
  1143 | 0000088A | 50                        | 	push ax
  1144 | 0000088B | 53                        | 	push bx
  1145 | 0000088C | 51                        | 	push cx
  1146 | 0000088D | 52                        | 	push dx
  1147 | 0000088E | 56                        | 	push si
  1148 | 0000088F | 57                        | 	push di
  1149 | 00000890 | 55                        | 	push bp
  1150 | 00000891 | 06                        | 	push es
  1151 | 00000892 | 1E                        | 	push ds
  1152 |          |                           | 
  1153 |          |                           | 		; Enable interrupts for higher-priority 
  1154 | 00000893 | FB                        | 	sti
  1155 |          |                           | 
  1156 |          |                           | 		; Run interrupt handler
  1157 | 00000894 | E8AF00                    | 	call c_isr_keypress
  1158 |          |                           | 
  1159 |          |                           | 		; disable interrupts
  1160 | 00000897 | FA                        | 	cli
  1161 |          |                           | 
  1162 |          |                           | 		;send EOI to PIC
  1163 | 00000898 | B020                      | 	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
  1164 | 0000089A | E620                      | 	out	0x20, al	; Write EOI to PIC (port 0x20)
  1165 |          |                           | 
  1166 |          |                           | 		; Restore context
  1167 | 0000089C | 1F                        | 	pop ds
  1168 | 0000089D | 07                        | 	pop es
  1169 | 0000089E | 5D                        | 	pop bp
  1170 | 0000089F | 5F                        | 	pop di
  1171 | 000008A0 | 5E                        | 	pop si
  1172 | 000008A1 | 5A                        | 	pop dx
  1173 | 000008A2 | 59                        | 	pop cx
  1174 | 000008A3 | 5B                        | 	pop bx
  1175 | 000008A4 | 58                        | 	pop ax
  1176 |          |                           | 
  1177 |          |                           | 		; Execute IRET
  1178 | 000008A5 | CF                        | 	iret
  1179 |          |                           | 
  1180 |          |                           | 
  1181 |          |                           | 
  1182 |          |                           | isr_tick:
  1183 |          |                           | 		; Save context
  1184 | 000008A6 | 50                        | 	push ax
  1185 | 000008A7 | 53                        | 	push bx
  1186 | 000008A8 | 51                        | 	push cx
  1187 | 000008A9 | 52                        | 	push dx
  1188 | 000008AA | 56                        | 	push si
  1189 | 000008AB | 57                        | 	push di
  1190 | 000008AC | 55                        | 	push bp
  1191 | 000008AD | 06                        | 	push es
  1192 | 000008AE | 1E                        | 	push ds
  1193 |          |                           | 
  1194 |          |                           | 		; Enable interrupts for higher-priority 
  1195 | 000008AF | FB                        | 	sti
  1196 |          |                           | 
  1197 |          |                           | 		; Run interrupt handler
  1198 | 000008B0 | E83100                    | 	call c_isr_tick
  1199 |          |                           | 
  1200 |          |                           | 		; disable interrupts
  1201 | 000008B3 | FA                        | 	cli
  1202 |          |                           | 
  1203 |          |                           | 		;send EOI to PIC
  1204 | 000008B4 | B020                      | 	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
  1205 | 000008B6 | E620                      | 	out	0x20, al	; Write EOI to PIC (port 0x20)
  1206 |          |                           | 
  1207 |          |                           | 		; Restore context
  1208 | 000008B8 | 1F                        | 	pop ds
  1209 | 000008B9 | 07                        | 	pop es
  1210 | 000008BA | 5D                        | 	pop bp
  1211 | 000008BB | 5F                        | 	pop di
  1212 | 000008BC | 5E                        | 	pop si
  1213 | 000008BD | 5A                        | 	pop dx
  1214 | 000008BE | 59                        | 	pop cx
  1215 | 000008BF | 5B                        | 	pop bx
  1216 | 000008C0 | 58                        | 	pop ax
  1217 |          |                           | 
  1218 |          |                           | 		; Execute IRET
  1219 | 000008C1 | CF                        | 	iret
  1220 |          |                           | ; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
  1221 |          |                           | 	CPU	8086
  1222 |          |                           | 	ALIGN	2
  1223 | 000008C2 | E9DD05                    | 	jmp	main	; Jump to program start
  1224 | 000008C5 | 90                        | 	ALIGN	2
  1225 |          |                           | c_isr_reset:
  1226 |          |                           | 	; >>>>> Line:	13
  1227 |          |                           | 	; >>>>> void c_isr_reset(){ 
  1228 | 000008C6 | EB0D                      | 	jmp	L_myinth_1
  1229 |          |                           | L_myinth_2:
  1230 |          |                           | 	; >>>>> Line:	15
  1231 |          |                           | 	; >>>>> exit(0); 
  1232 | 000008C8 | 30C0                      | 	xor	al, al
  1233 | 000008CA | 50                        | 	push	ax
  1234 | 000008CB | E80CFB                    | 	call	exit
  1235 | 000008CE | 83C402                    | 	add	sp, 2
  1236 | 000008D1 | 89EC                      | 	mov	sp, bp
  1237 | 000008D3 | 5D                        | 	pop	bp
  1238 | 000008D4 | C3                        | 	ret
  1239 |          |                           | L_myinth_1:
  1240 | 000008D5 | 55                        | 	push	bp
  1241 | 000008D6 | 89E5                      | 	mov	bp, sp
  1242 | 000008D8 | EBEE                      | 	jmp	L_myinth_2
  1243 |          |                           | 	ALIGN	2
  1244 |          |                           | L_myinth_4:
  1245 | 000008DA | 0000                      | 	DW	0
  1246 |          |                           | L_myinth_5:
  1247 | 000008DC | 0A5449434B2000            | 	DB	0xA,"TICK ",0
  1248 | 000008E3 | 90                        | 	ALIGN	2
  1249 |          |                           | c_isr_tick:
  1250 |          |                           | 	; >>>>> Line:	18
  1251 |          |                           | 	; >>>>> void c_isr_tick(){ 
  1252 | 000008E4 | EB1F                      | 	jmp	L_myinth_6
  1253 |          |                           | L_myinth_7:
  1254 |          |                           | 	; >>>>> Line:	21
  1255 |          |                           | 	; >>>>> printString("\nTICK "); 
  1256 | 000008E6 | B8[DC08]                  | 	mov	ax, L_myinth_5
  1257 | 000008E9 | 50                        | 	push	ax
  1258 | 000008EA | E83BFB                    | 	call	printString
  1259 | 000008ED | 83C402                    | 	add	sp, 2
  1260 |          |                           | 	; >>>>> Line:	22
  1261 |          |                           | 	; >>>>> printInt(tick_number++); 
  1262 | 000008F0 | A1[DA08]                  | 	mov	ax, word [L_myinth_4]
  1263 | 000008F3 | FF06[DA08]                | 	inc	word [L_myinth_4]
  1264 | 000008F7 | 50                        | 	push	ax
  1265 | 000008F8 | E851FB                    | 	call	printInt
  1266 | 000008FB | 83C402                    | 	add	sp, 2
  1267 |          |                           | 	; >>>>> Line:	23
  1268 |          |                           | 	; >>>>> printNewLine(); 
  1269 | 000008FE | E815FB                    | 	call	printNewLine
  1270 | 00000901 | 89EC                      | 	mov	sp, bp
  1271 | 00000903 | 5D                        | 	pop	bp
  1272 | 00000904 | C3                        | 	ret
  1273 |          |                           | L_myinth_6:
  1274 | 00000905 | 55                        | 	push	bp
  1275 | 00000906 | 89E5                      | 	mov	bp, sp
  1276 | 00000908 | EBDC                      | 	jmp	L_myinth_7
  1277 |          |                           | L_myinth_12:
  1278 | 0000090A | 292049474E4F524544-       | 	DB	") IGNORED",0xA,0
  1279 | 00000913 | 0A00                      | ...
  1280 |          |                           | L_myinth_11:
  1281 | 00000915 | 0A4B45595052455353-       | 	DB	0xA,"KEYPRESS (",0
  1282 | 0000091E | 202800                    | ...
  1283 |          |                           | L_myinth_10:
  1284 | 00000921 | 0A44454C415920434F-       | 	DB	0xA,"DELAY COMPLETE",0xA,0
  1285 | 0000092A | 4D504C4554450A00          | ...
  1286 |          |                           | L_myinth_9:
  1287 | 00000932 | 0A44454C4159204B45-       | 	DB	0xA,"DELAY KEY PRESSED",0xA,0
  1288 | 0000093B | 592050524553534544-       | ...
  1289 | 00000944 | 0A00                      | ...
  1290 |          |                           | 	ALIGN	2
  1291 |          |                           | c_isr_keypress:
  1292 |          |                           | 	; >>>>> Line:	26
  1293 |          |                           | 	; >>>>> void c_isr_keypress(){ 
  1294 | 00000946 | EB46                      | 	jmp	L_myinth_13
  1295 |          |                           | L_myinth_14:
  1296 |          |                           | 	; >>>>> Line:	30
  1297 |          |                           | 	; >>>>> if(c == 'd'){ 
  1298 | 00000948 | A0[C000]                  | 	mov	al, byte [KeyBuffer]
  1299 | 0000094B | 8846FF                    | 	mov	byte [bp-1], al
  1300 |          |                           | 	; >>>>> Line:	30
  1301 |          |                           | 	; >>>>> if(c == 'd'){ 
  1302 | 0000094E | 807EFF64                  | 	cmp	byte [bp-1], 100
  1303 | 00000952 | 7519                      | 	jne	L_myinth_15
  1304 |          |                           | 	; >>>>> Line:	31
  1305 |          |                           | 	; >>>>> printString("\nDELAY KEY PRESSED\n"); 
  1306 | 00000954 | B8[3209]                  | 	mov	ax, L_myinth_9
  1307 | 00000957 | 50                        | 	push	ax
  1308 | 00000958 | E8CDFA                    | 	call	printString
  1309 | 0000095B | 83C402                    | 	add	sp, 2
  1310 |          |                           | 	; >>>>> Line:	32
  1311 |          |                           | 	; >>>>> delay(); 
  1312 | 0000095E | E83300                    | 	call	delay
  1313 |          |                           | 	; >>>>> Line:	33
  1314 |          |                           | 	; >>>>> printString("\nDELAY COMPLETE\n"); 
  1315 | 00000961 | B8[2109]                  | 	mov	ax, L_myinth_10
  1316 | 00000964 | 50                        | 	push	ax
  1317 | 00000965 | E8C0FA                    | 	call	printString
  1318 | 00000968 | 83C402                    | 	add	sp, 2
  1319 | 0000096B | EB1D                      | 	jmp	L_myinth_16
  1320 |          |                           | L_myinth_15:
  1321 |          |                           | 	; >>>>> Line:	35
  1322 |          |                           | 	; >>>>> printString("\nKEYPRESS ("); 
  1323 | 0000096D | B8[1509]                  | 	mov	ax, L_myinth_11
  1324 | 00000970 | 50                        | 	push	ax
  1325 | 00000971 | E8B4FA                    | 	call	printString
  1326 | 00000974 | 83C402                    | 	add	sp, 2
  1327 |          |                           | 	; >>>>> Line:	36
  1328 |          |                           | 	; >>>>> printChar(c); 
  1329 | 00000977 | FF76FF                    | 	push	word [bp-1]
  1330 | 0000097A | E887FA                    | 	call	printChar
  1331 | 0000097D | 83C402                    | 	add	sp, 2
  1332 |          |                           | 	; >>>>> Line:	37
  1333 |          |                           | 	; >>>>> printString(") IGNORED\n"); 
  1334 | 00000980 | B8[0A09]                  | 	mov	ax, L_myinth_12
  1335 | 00000983 | 50                        | 	push	ax
  1336 | 00000984 | E8A1FA                    | 	call	printString
  1337 | 00000987 | 83C402                    | 	add	sp, 2
  1338 |          |                           | L_myinth_16:
  1339 | 0000098A | 89EC                      | 	mov	sp, bp
  1340 | 0000098C | 5D                        | 	pop	bp
  1341 | 0000098D | C3                        | 	ret
  1342 |          |                           | L_myinth_13:
  1343 | 0000098E | 55                        | 	push	bp
  1344 | 0000098F | 89E5                      | 	mov	bp, sp
  1345 | 00000991 | 51                        | 	push	cx
  1346 | 00000992 | EBB4                      | 	jmp	L_myinth_14
  1347 |          |                           | 	ALIGN	2
  1348 |          |                           | delay:
  1349 |          |                           | 	; >>>>> Line:	42
  1350 |          |                           | 	; >>>>> void delay(){ 
  1351 | 00000994 | EB1A                      | 	jmp	L_myinth_18
  1352 |          |                           | L_myinth_19:
  1353 |          |                           | 	; >>>>> Line:	44
  1354 |          |                           | 	; >>>>> for(i=0; i 
  1355 | 00000996 | C746FE0000                | 	mov	word [bp-2], 0
  1356 |          |                           | 	; >>>>> Line:	44
  1357 |          |                           | 	; >>>>> for(i=0; i 
  1358 | 0000099B | C746FE0000                | 	mov	word [bp-2], 0
  1359 | 000009A0 | EB03                      | 	jmp	L_myinth_21
  1360 |          |                           | L_myinth_20:
  1361 |          |                           | L_myinth_23:
  1362 |          |                           | 	; >>>>> Line:	45
  1363 |          |                           | 	; >>>>> ; 
  1364 | 000009A2 | FF46FE                    | 	inc	word [bp-2]
  1365 |          |                           | L_myinth_21:
  1366 | 000009A5 | 817EFE8813                | 	cmp	word [bp-2], 5000
  1367 | 000009AA | 7CF6                      | 	jl	L_myinth_20
  1368 |          |                           | L_myinth_22:
  1369 | 000009AC | 89EC                      | 	mov	sp, bp
  1370 | 000009AE | 5D                        | 	pop	bp
  1371 | 000009AF | C3                        | 	ret
  1372 |          |                           | L_myinth_18:
  1373 | 000009B0 | 55                        | 	push	bp
  1374 | 000009B1 | 89E5                      | 	mov	bp, sp
  1375 | 000009B3 | 51                        | 	push	cx
  1376 | 000009B4 | EBE0                      | 	jmp	L_myinth_19
  1377 |          |                           | ; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
  1378 |          |                           | 	CPU	8086
  1379 |          |                           | 	ALIGN	2
  1380 | 000009B6 | E9E904                    | 	jmp	main	; Jump to program start
  1381 |          |                           | started_running:
  1382 | 000009B9 | 00                        | 	DB	0
  1383 |          |                           | 	ALIGN	2
  1384 |          |                           | YKInitialize:
  1385 |          |                           | 	; >>>>> Line:	29
  1386 |          |                           | 	; >>>>> void YKInitialize(void){ 
  1387 | 000009BA | EB66                      | 	jmp	L_yakc_1
  1388 |          |                           | L_yakc_2:
  1389 |          |                           | 	; >>>>> Line:	33
  1390 |          |                           | 	; >>>>> YKCtxSwCount = 0; 
  1391 | 000009BC | C706[280C]0000            | 	mov	word [YKCtxSwCount], 0
  1392 |          |                           | 	; >>>>> Line:	34
  1393 |          |                           | 	; >>>>> YKIdleCount = 0; 
  1394 | 000009C2 | C706[2A0C]0000            | 	mov	word [YKIdleCount], 0
  1395 |          |                           | 	; >>>>> Line:	35
  1396 |          |                           | 	; >>>>> YKCurrentlyExecuting = 0; 
  1397 | 000009C8 | C706[640E]0000            | 	mov	word [YKCurrentlyExecuting], 0
  1398 |          |                           | 	; >>>>> Line:	42
  1399 |          |                           | 	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
  1400 | 000009CE | C706[320C][340C]          | 	mov	word [YKAvailTCBList], YKTCBArray
  1401 |          |                           | 	; >>>>> Line:	43
  1402 |          |                           | 	; >>>>> for (i = 0; i < 3; i++) 
  1403 | 000009D4 | C746FE0000                | 	mov	word [bp-2], 0
  1404 | 000009D9 | EB26                      | 	jmp	L_yakc_4
  1405 |          |                           | L_yakc_3:
  1406 |          |                           | 	; >>>>> Line:	44
  1407 |          |                           | 	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
  1408 | 000009DB | 8B46FE                    | 	mov	ax, word [bp-2]
  1409 | 000009DE | 40                        | 	inc	ax
  1410 | 000009DF | B90C00                    | 	mov	cx, 12
  1411 | 000009E2 | F7E9                      | 	imul	cx
  1412 | 000009E4 | 05[340C]                  | 	add	ax, YKTCBArray
  1413 | 000009E7 | 50                        | 	push	ax
  1414 | 000009E8 | 8B46FE                    | 	mov	ax, word [bp-2]
  1415 | 000009EB | B90C00                    | 	mov	cx, 12
  1416 | 000009EE | F7E9                      | 	imul	cx
  1417 | 000009F0 | 89C2                      | 	mov	dx, ax
  1418 | 000009F2 | 81C2[340C]                | 	add	dx, YKTCBArray
  1419 | 000009F6 | 89D6                      | 	mov	si, dx
  1420 | 000009F8 | 83C608                    | 	add	si, 8
  1421 | 000009FB | 58                        | 	pop	ax
  1422 | 000009FC | 8904                      | 	mov	word [si], ax
  1423 |          |                           | L_yakc_6:
  1424 | 000009FE | FF46FE                    | 	inc	word [bp-2]
  1425 |          |                           | L_yakc_4:
  1426 | 00000A01 | 837EFE03                  | 	cmp	word [bp-2], 3
  1427 | 00000A05 | 7CD4                      | 	jl	L_yakc_3
  1428 |          |                           | L_yakc_5:
  1429 |          |                           | 	; >>>>> Line:	45
  1430 |          |                           | 	; >>>>> YKTCBArray[3].next = 0; 
  1431 | 00000A07 | C706[600C]0000            | 	mov	word [(44+YKTCBArray)], 0
  1432 |          |                           | 	; >>>>> Line:	56
  1433 |          |                           | 	; >>>>> YKNewTask(YKIdleTask, (void *)&idleStack[256], 100); 
  1434 | 00000A0D | B064                      | 	mov	al, 100
  1435 | 00000A0F | 50                        | 	push	ax
  1436 | 00000A10 | B8[640E]                  | 	mov	ax, (idleStack+512)
  1437 | 00000A13 | 50                        | 	push	ax
  1438 | 00000A14 | B8[280A]                  | 	mov	ax, YKIdleTask
  1439 | 00000A17 | 50                        | 	push	ax
  1440 | 00000A18 | E82100                    | 	call	YKNewTask
  1441 | 00000A1B | 83C406                    | 	add	sp, 6
  1442 | 00000A1E | 89EC                      | 	mov	sp, bp
  1443 | 00000A20 | 5D                        | 	pop	bp
  1444 | 00000A21 | C3                        | 	ret
  1445 |          |                           | L_yakc_1:
  1446 | 00000A22 | 55                        | 	push	bp
  1447 | 00000A23 | 89E5                      | 	mov	bp, sp
  1448 | 00000A25 | 51                        | 	push	cx
  1449 | 00000A26 | EB94                      | 	jmp	L_yakc_2
  1450 |          |                           | 	ALIGN	2
  1451 |          |                           | YKIdleTask:
  1452 |          |                           | 	; >>>>> Line:	60
  1453 |          |                           | 	; >>>>> void YKIdleTask(void) { 
  1454 | 00000A28 | EB0C                      | 	jmp	L_yakc_8
  1455 |          |                           | L_yakc_9:
  1456 |          |                           | 	; >>>>> Line:	62
  1457 |          |                           | 	; >>>>> while(1){ 
  1458 | 00000A2A | EB04                      | 	jmp	L_yakc_11
  1459 |          |                           | L_yakc_10:
  1460 |          |                           | 	; >>>>> Line:	64
  1461 |          |                           | 	; >>>>> YKIdleCount++; 
  1462 | 00000A2C | FF06[2A0C]                | 	inc	word [YKIdleCount]
  1463 |          |                           | L_yakc_11:
  1464 | 00000A30 | EBFA                      | 	jmp	L_yakc_10
  1465 |          |                           | L_yakc_12:
  1466 | 00000A32 | 89EC                      | 	mov	sp, bp
  1467 | 00000A34 | 5D                        | 	pop	bp
  1468 | 00000A35 | C3                        | 	ret
  1469 |          |                           | L_yakc_8:
  1470 | 00000A36 | 55                        | 	push	bp
  1471 | 00000A37 | 89E5                      | 	mov	bp, sp
  1472 | 00000A39 | EBEF                      | 	jmp	L_yakc_9
  1473 | 00000A3B | 90                        | 	ALIGN	2
  1474 |          |                           | YKNewTask:
  1475 |          |                           | 	; >>>>> Line:	76
  1476 |          |                           | 	; >>>>> tmp2; 
  1477 | 00000A3C | E96101                    | 	jmp	L_yakc_14
  1478 |          |                           | L_yakc_15:
  1479 |          |                           | 	; >>>>> Line:	87
  1480 |          |                           | 	; >>>>> tmp = YKAvailTCBList; 
  1481 | 00000A3F | A1[320C]                  | 	mov	ax, word [YKAvailTCBList]
  1482 | 00000A42 | 8946FE                    | 	mov	word [bp-2], ax
  1483 |          |                           | 	; >>>>> Line:	88
  1484 |          |                           | 	; >>>>> YKAvailTCBList = tmp->next; 
  1485 | 00000A45 | 8B76FE                    | 	mov	si, word [bp-2]
  1486 | 00000A48 | 83C608                    | 	add	si, 8
  1487 | 00000A4B | 8B04                      | 	mov	ax, word [si]
  1488 | 00000A4D | A3[320C]                  | 	mov	word [YKAvailTCBList], ax
  1489 |          |                           | 	; >>>>> Line:	92
  1490 |          |                           | 	; >>>>> tmp->delay = 0; 
  1491 | 00000A50 | 8B76FE                    | 	mov	si, word [bp-2]
  1492 | 00000A53 | 83C606                    | 	add	si, 6
  1493 | 00000A56 | C7040000                  | 	mov	word [si], 0
  1494 |          |                           | 	; >>>>> Line:	98
  1495 |          |                           | 	; >>>>> tmp->priority = priority; 
  1496 | 00000A5A | 8A4608                    | 	mov	al, byte [bp+8]
  1497 | 00000A5D | 30E4                      | 	xor	ah, ah
  1498 | 00000A5F | 8B76FE                    | 	mov	si, word [bp-2]
  1499 | 00000A62 | 83C604                    | 	add	si, 4
  1500 | 00000A65 | 8904                      | 	mov	word [si], ax
  1501 |          |                           | 	; >>>>> Line:	105
  1502 |          |                           | 	; >>>>> if (YKRdyList == 0) { 
  1503 | 00000A67 | A1[2E0C]                  | 	mov	ax, word [YKRdyList]
  1504 | 00000A6A | 85C0                      | 	test	ax, ax
  1505 | 00000A6C | 751C                      | 	jne	L_yakc_16
  1506 |          |                           | 	; >>>>> Line:	106
  1507 |          |                           | 	; >>>>> YKRdyList = tmp; 
  1508 | 00000A6E | 8B46FE                    | 	mov	ax, word [bp-2]
  1509 | 00000A71 | A3[2E0C]                  | 	mov	word [YKRdyList], ax
  1510 |          |                           | 	; >>>>> Line:	107
  1511 |          |                           | 	; >>>>> tmp->next = 0; 
  1512 | 00000A74 | 8B76FE                    | 	mov	si, word [bp-2]
  1513 | 00000A77 | 83C608                    | 	add	si, 8
  1514 | 00000A7A | C7040000                  | 	mov	word [si], 0
  1515 |          |                           | 	; >>>>> Line:	108
  1516 |          |                           | 	; >>>>> tmp->prev = 0; 
  1517 | 00000A7E | 8B76FE                    | 	mov	si, word [bp-2]
  1518 | 00000A81 | 83C60A                    | 	add	si, 10
  1519 | 00000A84 | C7040000                  | 	mov	word [si], 0
  1520 | 00000A88 | EB6F                      | 	jmp	L_yakc_17
  1521 |          |                           | L_yakc_16:
  1522 |          |                           | 	; >>>>> Line:	110
  1523 |          |                           | 	; >>>>> tmp2 = YKRdyList; 
  1524 | 00000A8A | A1[2E0C]                  | 	mov	ax, word [YKRdyList]
  1525 | 00000A8D | 8946FC                    | 	mov	word [bp-4], ax
  1526 |          |                           | 	; >>>>> Line:	111
  1527 |          |                           | 	; >>>>> while (tmp2->priority < tmp->priority) 
  1528 | 00000A90 | EB0B                      | 	jmp	L_yakc_19
  1529 |          |                           | L_yakc_18:
  1530 |          |                           | 	; >>>>> Line:	112
  1531 |          |                           | 	; >>>>> tmp2 = tmp2->next; 
  1532 | 00000A92 | 8B76FC                    | 	mov	si, word [bp-4]
  1533 | 00000A95 | 83C608                    | 	add	si, 8
  1534 | 00000A98 | 8B04                      | 	mov	ax, word [si]
  1535 | 00000A9A | 8946FC                    | 	mov	word [bp-4], ax
  1536 |          |                           | L_yakc_19:
  1537 | 00000A9D | 8B76FC                    | 	mov	si, word [bp-4]
  1538 | 00000AA0 | 83C604                    | 	add	si, 4
  1539 | 00000AA3 | 8B7EFE                    | 	mov	di, word [bp-2]
  1540 | 00000AA6 | 83C704                    | 	add	di, 4
  1541 | 00000AA9 | 8B05                      | 	mov	ax, word [di]
  1542 | 00000AAB | 3B04                      | 	cmp	ax, word [si]
  1543 | 00000AAD | 7FE3                      | 	jg	L_yakc_18
  1544 |          |                           | L_yakc_20:
  1545 |          |                           | 	; >>>>> Line:	113
  1546 |          |                           | 	; >>>>> if (tmp2->prev == 0) 
  1547 | 00000AAF | 8B76FC                    | 	mov	si, word [bp-4]
  1548 | 00000AB2 | 83C60A                    | 	add	si, 10
  1549 | 00000AB5 | 8B04                      | 	mov	ax, word [si]
  1550 | 00000AB7 | 85C0                      | 	test	ax, ax
  1551 | 00000AB9 | 7508                      | 	jne	L_yakc_21
  1552 |          |                           | 	; >>>>> Line:	114
  1553 |          |                           | 	; >>>>> YKRdyList = tmp; 
  1554 | 00000ABB | 8B46FE                    | 	mov	ax, word [bp-2]
  1555 | 00000ABE | A3[2E0C]                  | 	mov	word [YKRdyList], ax
  1556 | 00000AC1 | EB10                      | 	jmp	L_yakc_22
  1557 |          |                           | L_yakc_21:
  1558 |          |                           | 	; >>>>> Line:	116
  1559 |          |                           | 	; >>>>> tmp2->prev->next = tmp; 
  1560 | 00000AC3 | 8B76FC                    | 	mov	si, word [bp-4]
  1561 | 00000AC6 | 83C60A                    | 	add	si, 10
  1562 | 00000AC9 | 8B34                      | 	mov	si, word [si]
  1563 | 00000ACB | 83C608                    | 	add	si, 8
  1564 | 00000ACE | 8B46FE                    | 	mov	ax, word [bp-2]
  1565 | 00000AD1 | 8904                      | 	mov	word [si], ax
  1566 |          |                           | L_yakc_22:
  1567 |          |                           | 	; >>>>> Line:	117
  1568 |          |                           | 	; >>>>> tmp->prev = tmp2->prev; 
  1569 | 00000AD3 | 8B76FC                    | 	mov	si, word [bp-4]
  1570 | 00000AD6 | 83C60A                    | 	add	si, 10
  1571 | 00000AD9 | 8B7EFE                    | 	mov	di, word [bp-2]
  1572 | 00000ADC | 83C70A                    | 	add	di, 10
  1573 | 00000ADF | 8B04                      | 	mov	ax, word [si]
  1574 | 00000AE1 | 8905                      | 	mov	word [di], ax
  1575 |          |                           | 	; >>>>> Line:	118
  1576 |          |                           | 	; >>>>> tmp->next = tmp2; 
  1577 | 00000AE3 | 8B76FE                    | 	mov	si, word [bp-2]
  1578 | 00000AE6 | 83C608                    | 	add	si, 8
  1579 | 00000AE9 | 8B46FC                    | 	mov	ax, word [bp-4]
  1580 | 00000AEC | 8904                      | 	mov	word [si], ax
  1581 |          |                           | 	; >>>>> Line:	119
  1582 |          |                           | 	; >>>>> tmp2->prev = tmp; 
  1583 | 00000AEE | 8B76FC                    | 	mov	si, word [bp-4]
  1584 | 00000AF1 | 83C60A                    | 	add	si, 10
  1585 | 00000AF4 | 8B46FE                    | 	mov	ax, word [bp-2]
  1586 | 00000AF7 | 8904                      | 	mov	word [si], ax
  1587 |          |                           | L_yakc_17:
  1588 |          |                           | 	; >>>>> Line:	130
  1589 |          |                           | 	; >>>>> tmp->stackptr = taskSta 
  1590 | 00000AF9 | 8B76FE                    | 	mov	si, word [bp-2]
  1591 | 00000AFC | 8B4606                    | 	mov	ax, word [bp+6]
  1592 | 00000AFF | 8904                      | 	mov	word [si], ax
  1593 |          |                           | 	; >>>>> Line:	132
  1594 |          |                           | 	; >>>>> tmp->stackptr = tmp->stackptr - 11; 
  1595 | 00000B01 | 8B76FE                    | 	mov	si, word [bp-2]
  1596 | 00000B04 | 8B04                      | 	mov	ax, word [si]
  1597 | 00000B06 | 83E816                    | 	sub	ax, 22
  1598 | 00000B09 | 8904                      | 	mov	word [si], ax
  1599 |          |                           | 	; >>>>> Line:	133
  1600 |          |                           | 	; >>>>> *(tmp->stackptr+11) = 0x200; 
  1601 | 00000B0B | 8B76FE                    | 	mov	si, word [bp-2]
  1602 | 00000B0E | 8B34                      | 	mov	si, word [si]
  1603 | 00000B10 | 83C616                    | 	add	si, 22
  1604 | 00000B13 | C7040002                  | 	mov	word [si], 512
  1605 |          |                           | 	; >>>>> Line:	134
  1606 |          |                           | 	; >>>>> *(tmp->stackptr+10) = 0; 
  1607 | 00000B17 | 8B76FE                    | 	mov	si, word [bp-2]
  1608 | 00000B1A | 8B34                      | 	mov	si, word [si]
  1609 | 00000B1C | 83C614                    | 	add	si, 20
  1610 | 00000B1F | C7040000                  | 	mov	word [si], 0
  1611 |          |                           | 	; >>>>> Line:	135
  1612 |          |                           | 	; >>>>> *(tmp->stackptr+9) = (int)task; 
  1613 | 00000B23 | 8B76FE                    | 	mov	si, word [bp-2]
  1614 | 00000B26 | 8B34                      | 	mov	si, word [si]
  1615 | 00000B28 | 83C612                    | 	add	si, 18
  1616 | 00000B2B | 8B4604                    | 	mov	ax, word [bp+4]
  1617 | 00000B2E | 8904                      | 	mov	word [si], ax
  1618 |          |                           | 	; >>>>> Line:	136
  1619 |          |                           | 	; >>>>> *(tmp->stackptr+8) = 0; 
  1620 | 00000B30 | 8B76FE                    | 	mov	si, word [bp-2]
  1621 | 00000B33 | 8B34                      | 	mov	si, word [si]
  1622 | 00000B35 | 83C610                    | 	add	si, 16
  1623 | 00000B38 | C7040000                  | 	mov	word [si], 0
  1624 |          |                           | 	; >>>>> Line:	137
  1625 |          |                           | 	; >>>>> *(tmp->stackptr+7) = 0; 
  1626 | 00000B3C | 8B76FE                    | 	mov	si, word [bp-2]
  1627 | 00000B3F | 8B34                      | 	mov	si, word [si]
  1628 | 00000B41 | 83C60E                    | 	add	si, 14
  1629 | 00000B44 | C7040000                  | 	mov	word [si], 0
  1630 |          |                           | 	; >>>>> Line:	138
  1631 |          |                           | 	; >>>>> *(tmp->stackptr+6) = 0; 
  1632 | 00000B48 | 8B76FE                    | 	mov	si, word [bp-2]
  1633 | 00000B4B | 8B34                      | 	mov	si, word [si]
  1634 | 00000B4D | 83C60C                    | 	add	si, 12
  1635 | 00000B50 | C7040000                  | 	mov	word [si], 0
  1636 |          |                           | 	; >>>>> Line:	139
  1637 |          |                           | 	; >>>>> *(tmp->stackptr+5) = 0; 
  1638 | 00000B54 | 8B76FE                    | 	mov	si, word [bp-2]
  1639 | 00000B57 | 8B34                      | 	mov	si, word [si]
  1640 | 00000B59 | 83C60A                    | 	add	si, 10
  1641 | 00000B5C | C7040000                  | 	mov	word [si], 0
  1642 |          |                           | 	; >>>>> Line:	140
  1643 |          |                           | 	; >>>>> *(tmp->stackptr+4) = 0; 
  1644 | 00000B60 | 8B76FE                    | 	mov	si, word [bp-2]
  1645 | 00000B63 | 8B34                      | 	mov	si, word [si]
  1646 | 00000B65 | 83C608                    | 	add	si, 8
  1647 | 00000B68 | C7040000                  | 	mov	word [si], 0
  1648 |          |                           | 	; >>>>> Line:	141
  1649 |          |                           | 	; >>>>> *(tmp->stackptr+3) = 0; 
  1650 | 00000B6C | 8B76FE                    | 	mov	si, word [bp-2]
  1651 | 00000B6F | 8B34                      | 	mov	si, word [si]
  1652 | 00000B71 | 83C606                    | 	add	si, 6
  1653 | 00000B74 | C7040000                  | 	mov	word [si], 0
  1654 |          |                           | 	; >>>>> Line:	142
  1655 |          |                           | 	; >>>>> *(tmp->stackptr+2) = 0; 
  1656 | 00000B78 | 8B76FE                    | 	mov	si, word [bp-2]
  1657 | 00000B7B | 8B34                      | 	mov	si, word [si]
  1658 | 00000B7D | 83C604                    | 	add	si, 4
  1659 | 00000B80 | C7040000                  | 	mov	word [si], 0
  1660 |          |                           | 	; >>>>> Line:	143
  1661 |          |                           | 	; >>>>> *(tmp->stackptr+1) = 0; 
  1662 | 00000B84 | 8B76FE                    | 	mov	si, word [bp-2]
  1663 | 00000B87 | 8B34                      | 	mov	si, word [si]
  1664 | 00000B89 | 83C602                    | 	add	si, 2
  1665 | 00000B8C | C7040000                  | 	mov	word [si], 0
  1666 |          |                           | 	; >>>>> Line:	144
  1667 |          |                           | 	; >>>>> *(tmp->stackptr+0) = 0; 
  1668 | 00000B90 | 8B76FE                    | 	mov	si, word [bp-2]
  1669 | 00000B93 | 8B34                      | 	mov	si, word [si]
  1670 | 00000B95 | C7040000                  | 	mov	word [si], 0
  1671 |          |                           | 	; >>>>> Line:	149
  1672 |          |                           | 	; >>>>> YKScheduler(); 
  1673 | 00000B99 | E82200                    | 	call	YKScheduler
  1674 | 00000B9C | 89EC                      | 	mov	sp, bp
  1675 | 00000B9E | 5D                        | 	pop	bp
  1676 | 00000B9F | C3                        | 	ret
  1677 |          |                           | L_yakc_14:
  1678 | 00000BA0 | 55                        | 	push	bp
  1679 | 00000BA1 | 89E5                      | 	mov	bp, sp
  1680 | 00000BA3 | 83EC04                    | 	sub	sp, 4
  1681 | 00000BA6 | E996FE                    | 	jmp	L_yakc_15
  1682 | 00000BA9 | 90                        | 	ALIGN	2
  1683 |          |                           | YKRun:
  1684 |          |                           | 	; >>>>> Line:	156
  1685 |          |                           | 	; >>>>> void YKRun(void) { 
  1686 | 00000BAA | EB0C                      | 	jmp	L_yakc_24
  1687 |          |                           | L_yakc_25:
  1688 |          |                           | 	; >>>>> Line:	158
  1689 |          |                           | 	; >>>>> started_running = 1; 
  1690 | 00000BAC | C606[B909]01              | 	mov	byte [started_running], 1
  1691 |          |                           | 	; >>>>> Line:	159
  1692 |          |                           | 	; >>>>> YKScheduler(); 
  1693 | 00000BB1 | E80A00                    | 	call	YKScheduler
  1694 | 00000BB4 | 89EC                      | 	mov	sp, bp
  1695 | 00000BB6 | 5D                        | 	pop	bp
  1696 | 00000BB7 | C3                        | 	ret
  1697 |          |                           | L_yakc_24:
  1698 | 00000BB8 | 55                        | 	push	bp
  1699 | 00000BB9 | 89E5                      | 	mov	bp, sp
  1700 | 00000BBB | EBEF                      | 	jmp	L_yakc_25
  1701 | 00000BBD | 90                        | 	ALIGN	2
  1702 |          |                           | YKScheduler:
  1703 |          |                           | 	; >>>>> Line:	168
  1704 |          |                           | 	; >>>>> void YKScheduler(void) { 
  1705 | 00000BBE | EB2C                      | 	jmp	L_yakc_27
  1706 |          |                           | L_yakc_28:
  1707 |          |                           | 	; >>>>> Line:	192
  1708 |          |                           | 	; >>>>> if(started_running){ 
  1709 | 00000BC0 | A1[2E0C]                  | 	mov	ax, word [YKRdyList]
  1710 | 00000BC3 | 8946FE                    | 	mov	word [bp-2], ax
  1711 |          |                           | 	; >>>>> Line:	192
  1712 |          |                           | 	; >>>>> if(started_running){ 
  1713 | 00000BC6 | A0[B909]                  | 	mov	al, byte [started_running]
  1714 | 00000BC9 | 84C0                      | 	test	al, al
  1715 | 00000BCB | 741B                      | 	je	L_yakc_29
  1716 |          |                           | 	; >>>>> Line:	193
  1717 |          |                           | 	; >>>>> if(YKCurrentlyExecuting == highest_priority_task){ 
  1718 | 00000BCD | 8B46FE                    | 	mov	ax, word [bp-2]
  1719 | 00000BD0 | 3B06[640E]                | 	cmp	ax, word [YKCurrentlyExecuting]
  1720 | 00000BD4 | 7502                      | 	jne	L_yakc_30
  1721 |          |                           | 	; >>>>> Line:	194
  1722 |          |                           | 	; >>>>> return; 
  1723 | 00000BD6 | EB10                      | 	jmp	L_yakc_31
  1724 |          |                           | L_yakc_30:
  1725 |          |                           | 	; >>>>> Line:	197
  1726 |          |                           | 	; >>>>> YKCtxSwCount = YKCtxSwCount + 1; 
  1727 | 00000BD8 | A1[280C]                  | 	mov	ax, word [YKCtxSwCount]
  1728 | 00000BDB | 40                        | 	inc	ax
  1729 | 00000BDC | A3[280C]                  | 	mov	word [YKCtxSwCount], ax
  1730 |          |                           | 	; >>>>> Line:	198
  1731 |          |                           | 	; >>>>> YKCurrentlyExecuting = highest_priority_task; 
  1732 | 00000BDF | 8B46FE                    | 	mov	ax, word [bp-2]
  1733 | 00000BE2 | A3[640E]                  | 	mov	word [YKCurrentlyExecuting], ax
  1734 |          |                           | 	; >>>>> Line:	200
  1735 |          |                           | 	; >>>>> YKDispatcher(); 
  1736 | 00000BE5 | E88202                    | 	call	YKDispatcher
  1737 |          |                           | L_yakc_29:
  1738 |          |                           | L_yakc_31:
  1739 | 00000BE8 | 89EC                      | 	mov	sp, bp
  1740 | 00000BEA | 5D                        | 	pop	bp
  1741 | 00000BEB | C3                        | 	ret
  1742 |          |                           | L_yakc_27:
  1743 | 00000BEC | 55                        | 	push	bp
  1744 | 00000BED | 89E5                      | 	mov	bp, sp
  1745 | 00000BEF | 51                        | 	push	cx
  1746 | 00000BF0 | EBCE                      | 	jmp	L_yakc_28
  1747 |          |                           | 	ALIGN	2
  1748 |          |                           | YKDelayTask:
  1749 |          |                           | 	; >>>>> Line:	217
  1750 |          |                           | 	; >>>>> { 
  1751 | 00000BF2 | EB0A                      | 	jmp	L_yakc_33
  1752 |          |                           | L_yakc_34:
  1753 |          |                           | 	; >>>>> Line:	220
  1754 |          |                           | 	; >>>>> } 
  1755 | 00000BF4 | 8B4604                    | 	mov	ax, word [bp+4]
  1756 | 00000BF7 | 8946FE                    | 	mov	word [bp-2], ax
  1757 | 00000BFA | 89EC                      | 	mov	sp, bp
  1758 | 00000BFC | 5D                        | 	pop	bp
  1759 | 00000BFD | C3                        | 	ret
  1760 |          |                           | L_yakc_33:
  1761 | 00000BFE | 55                        | 	push	bp
  1762 | 00000BFF | 89E5                      | 	mov	bp, sp
  1763 | 00000C01 | 51                        | 	push	cx
  1764 | 00000C02 | EBF0                      | 	jmp	L_yakc_34
  1765 |          |                           | 	ALIGN	2
  1766 |          |                           | YKEnterISR:
  1767 |          |                           | 	; >>>>> Line:	224
  1768 |          |                           | 	; >>>>> { 
  1769 | 00000C04 | EB04                      | 	jmp	L_yakc_36
  1770 |          |                           | L_yakc_37:
  1771 |          |                           | 	; >>>>> Line:	226
  1772 |          |                           | 	; >>>>> } 
  1773 | 00000C06 | 89EC                      | 	mov	sp, bp
  1774 | 00000C08 | 5D                        | 	pop	bp
  1775 | 00000C09 | C3                        | 	ret
  1776 |          |                           | L_yakc_36:
  1777 | 00000C0A | 55                        | 	push	bp
  1778 | 00000C0B | 89E5                      | 	mov	bp, sp
  1779 | 00000C0D | EBF7                      | 	jmp	L_yakc_37
  1780 | 00000C0F | 90                        | 	ALIGN	2
  1781 |          |                           | YKExitISR:
  1782 |          |                           | 	; >>>>> Line:	230
  1783 |          |                           | 	; >>>>> { 
  1784 | 00000C10 | EB04                      | 	jmp	L_yakc_39
  1785 |          |                           | L_yakc_40:
  1786 |          |                           | 	; >>>>> Line:	232
  1787 |          |                           | 	; >>>>> } 
  1788 | 00000C12 | 89EC                      | 	mov	sp, bp
  1789 | 00000C14 | 5D                        | 	pop	bp
  1790 | 00000C15 | C3                        | 	ret
  1791 |          |                           | L_yakc_39:
  1792 | 00000C16 | 55                        | 	push	bp
  1793 | 00000C17 | 89E5                      | 	mov	bp, sp
  1794 | 00000C19 | EBF7                      | 	jmp	L_yakc_40
  1795 | 00000C1B | 90                        | 	ALIGN	2
  1796 |          |                           | YKTickHandler:
  1797 |          |                           | 	; >>>>> Line:	236
  1798 |          |                           | 	; >>>>> { 
  1799 | 00000C1C | EB04                      | 	jmp	L_yakc_42
  1800 |          |                           | L_yakc_43:
  1801 |          |                           | 	; >>>>> Line:	238
  1802 |          |                           | 	; >>>>> } 
  1803 | 00000C1E | 89EC                      | 	mov	sp, bp
  1804 | 00000C20 | 5D                        | 	pop	bp
  1805 | 00000C21 | C3                        | 	ret
  1806 |          |                           | L_yakc_42:
  1807 | 00000C22 | 55                        | 	push	bp
  1808 | 00000C23 | 89E5                      | 	mov	bp, sp
  1809 | 00000C25 | EBF7                      | 	jmp	L_yakc_43
  1810 | 00000C27 | 90                        | 	ALIGN	2
  1811 |          |                           | YKCtxSwCount:
  1812 | 00000C28 | 00<rept>                  | 	TIMES	2 db 0
  1813 |          |                           | YKIdleCount:
  1814 | 00000C2A | 00<rept>                  | 	TIMES	2 db 0
  1815 |          |                           | YKTickNum:
  1816 | 00000C2C | 00<rept>                  | 	TIMES	2 db 0
  1817 |          |                           | YKRdyList:
  1818 | 00000C2E | 00<rept>                  | 	TIMES	2 db 0
  1819 |          |                           | YKSuspList:
  1820 | 00000C30 | 00<rept>                  | 	TIMES	2 db 0
  1821 |          |                           | YKAvailTCBList:
  1822 | 00000C32 | 00<rept>                  | 	TIMES	2 db 0
  1823 |          |                           | YKTCBArray:
  1824 | 00000C34 | 00<rept>                  | 	TIMES	48 db 0
  1825 |          |                           | idleStack:
  1826 | 00000C64 | 00<rept>                  | 	TIMES	512 db 0
  1827 |          |                           | YKCurrentlyExecuting:
  1828 | 00000E64 | 00<rept>                  | 	TIMES	2 db 0
  1829 |          |                           | ; All kernel routines that are written in assembly are here 
  1830 |          |                           | 
  1831 |          |                           | 
  1832 |          |                           | ; Disables interrupts 
  1833 |          |                           | YKEnterMutex:
  1834 | 00000E66 | FA                        | 	cli	; clear interrupt flag to disable interrupts 
  1835 | 00000E67 | C3                        | 	ret
  1836 |          |                           | 
  1837 |          |                           | ; Enables Interrupts 
  1838 |          |                           | YKExitMutex:
  1839 | 00000E68 | FB                        | 	sti	; set interrupt flag to enable interrupts 
  1840 | 00000E69 | C3                        | 	ret
  1841 |          |                           | 
  1842 |          |                           | YKDispatcher:
  1843 |          |                           | 	; So if we are following andy's design
  1844 |          |                           | 	; we will save context here (if the boolean
  1845 |          |                           | 	; passed to us tells us to)
  1846 |          |                           | 	
  1847 |          |                           | 	; Hmm. Should the proper SS and SP be passed to us as an argument?
  1848 |          |                           | 	; Or shall we fetch them ourselves?
  1849 |          |                           | 
  1850 |          |                           | 
  1851 |          |                           | 	; I am TRYING to move what YKRdyList is pointing at into the stack pointer
  1852 |          |                           | 	; Because what YKRdyList points at is the stack pointer of the most ready task
  1853 |          |                           | 	; Incorrect. The value from the dereferenced YKRdyList needs to be 
  1854 |          |                           | 	; dereferenced again to get the proper stack pointer
  1855 |          |                           | 	;mov SP, [YKRdyList]
  1856 | 00000E6A | 8B1E[2E0C]                | 	mov BX, [YKRdyList]
  1857 | 00000E6E | 8B27                      | 	mov SP, word [BX]
  1858 |          |                           | 
  1859 |          |                           | 
  1860 |          |                           | 	; but in any case we need to restore context
  1861 | 00000E70 | 07                        | 	pop ES
  1862 | 00000E71 | 1F                        | 	pop DS
  1863 | 00000E72 | 5F                        | 	pop DI
  1864 | 00000E73 | 5E                        | 	pop SI
  1865 | 00000E74 | 5D                        | 	pop BP
  1866 | 00000E75 | 5A                        | 	pop DX
  1867 | 00000E76 | 59                        | 	pop CX
  1868 | 00000E77 | 5B                        | 	pop BX
  1869 | 00000E78 | 58                        | 	pop AX
  1870 |          |                           | 	; After this- done by reti
  1871 |          |                           | 	; IP
  1872 |          |                           | 	; CS
  1873 |          |                           | 	; flags
  1874 | 00000E79 | CF                        | 	iret
  1875 |          |                           | 
  1876 |          |                           | ;
  1877 |          |                           | ; POSSIBLE SOLUITION
  1878 |          |                           | ; Use assembly macro to
  1879 |          |                           | ; in-line all of this
  1880 |          |                           | ; so it doesn't have to 
  1881 |          |                           | ; be a function call
  1882 |          |                           | ;
  1883 |          |                           | ;
  1884 |          |                           | ; (Start stack)
  1885 |          |                           | ;	IP of task
  1886 |          |                           | ;	return address
  1887 |          |                           | ;	[SP points here]
  1888 |          |                           | ; 
  1889 |          |                           | ; (End stack)
  1890 |          |                           | ;	flags
  1891 |          |                           | ;	CS
  1892 |          |                           | ;	IP
  1893 |          |                           | ;	return address
  1894 |          |                           | ;	[SP points here]
  1895 |          |                           | ;
  1896 |          |                           | ;YKSaveFlagsAndCS:
  1897 |          |                           | ;	sub SP, 4
  1898 |          |                           | ;	push DX			; Save DX
  1899 |          |                           | ;	push CX			; Save CX
  1900 |          |                           | ;	mov DX, SP+12	; DX = IP (to original task)
  1901 |          |                           | ;	mov CX, SP+10	; CX = return address (to whomever called me)
  1902 |          |                           | ;	mov SP+8, DX
  1903 |          |                           | ;	mov SP+6, CX
  1904 |          |                           | ;	pop CX			; Restore CX
  1905 |          |                           | ;	pop DX			; Restore DX
  1906 |          |                           | ;
  1907 |          |                           | ;	add SP, 8
  1908 |          |                           | ;	pushf			; push flags into their proper spot
  1909 |          |                           | ;	push CS			; push CS into its proper spot
  1910 |          |                           | ;	sub SP, 4
  1911 |          |                           | ;	
  1912 |          |                           | ;	jmp YKSaveContext	; Now we are ready to save the rest of context
  1913 |          |                           | 
  1914 |          |                           | ; This saves the context on the current stack frame 
  1915 |          |                           | ; We are assuming this is called from an interrupt
  1916 |          |                           | ;	(if it is not, call YKSaveFlagsAndCS instead)
  1917 |          |                           | ; So we already have flags, CS, and IP saved properly
  1918 |          |                           | ;YKSaveContext:
  1919 |          |                           | ;	;SP + 2 (I think) is return address.
  1920 |          |                           | ;	sub SP, 18	; Get ready to save 9 words onto the stack
  1921 |          |                           | ;	push DX
  1922 |          |                           | ;	mov DX, SP + 22	; mov the return address onto SP 
  1923 |          |                           | ;	mov SP+4, DX	; put it at the end of the stack, ready to be popped
  1924 |          |                           | ;	pop DX
  1925 |          |                           | ;	
  1926 |          |                           | ;	mov [SP+20], AX
  1927 |          |                           | ;	mov SP+18, BX
  1928 |          |                           | ;	mov SP+16, CX
  1929 |          |                           | ;	mov SP+14, DX
  1930 |          |                           | ;	mov SP+12, BP
  1931 |          |                           | ;	mov SP+10, SI
  1932 |          |                           | ;	mov SP+8, DI
  1933 |          |                           | ;	mov SP+6, DS
  1934 |          |                           | ;	mov SP+4, ES
  1935 |          |                           | ;;	; Current stack: return address, empty 
  1936 |          |                           | ;;	push AX	; Each 
  1937 |          |                           | ;	push BX	; one  
  1938 |          |                           | ;	push CX	; is  
  1939 |          |                           | ;	push DX	; sp-2 
  1940 |          |                           | ;	; Instruction Pointer - In interrupt, saved already
  1941 |          |                           | ;	; Stack pointer - Need to be saved seperately
  1942 |          |                           | ;	push BP ; Base pointer 
  1943 |          |                           | ;	push SI ; Source index 
  1944 |          |                           | ;	push DI ; Destination index    
  1945 |          |                           | ;	; Code segment - Saved with IP?
  1946 |          |                           | ;	; Stack segment - saved with SP?
  1947 |          |                           | ;	push DS ; Data segment 
  1948 |          |                           | ;	push ES ; Extra segment 
  1949 |          |                           | ;	; Flags - interrupts already save it
  1950 |          |                           | ;	ret
  1951 |          |                           | 
  1952 |          |                           | ; This restores the context FROM the current stack frame 
  1953 |          |                           | ;YKRestoreContext:
  1954 |          |                           | ;	mov AX, SP+20
  1955 |          |                           | ;	mov BX, SP+18
  1956 |          |                           | ;	mov CX, SP+16
  1957 |          |                           | ;	mov DX, SP+14
  1958 |          |                           | ;	mov BP, SP+12
  1959 |          |                           | ;	mov SI, SP+10
  1960 |          |                           | ;	mov DI, SP+8
  1961 |          |                           | ;	mov DS, SP+6
  1962 |          |                           | ;	mov ES, SP+4
  1963 |          |                           | ;
  1964 |          |                           | ;	push DX
  1965 |          |                           | ;	mov DX, SP+4
  1966 |          |                           | ;	mov SP+22 , DX
  1967 |          |                           | ;	pop DX
  1968 |          |                           | ;	add SP, 18
  1969 |          |                           | ;	ret
  1970 |          |                           | 
  1971 |          |                           | ;	add SP, 2	; This deletes the return address saved when we call'ed YKRestoreContext.
  1972 |          |                           | ;	pop ES
  1973 |          |                           | ;	pop DS
  1974 |          |                           | ;	SS
  1975 |          |                           | ;	CS
  1976 |          |                           | ;	pop DI
  1977 |          |                           | ;	pop SI
  1978 |          |                           | ;	pop BP
  1979 |          |                           | ;	SP
  1980 |          |                           | ;	IP
  1981 |          |                           | 
  1982 |          |                           | ;	pop DX
  1983 |          |                           | ;	pop CX
  1984 |          |                           | ;	pop BX
  1985 |          |                           | ;	pop AX
  1986 |          |                           | ;	reti		; This pops IP, CS, and the flags, and goes to the return address.
  1987 |          |                           | 
  1988 |          |                           | ; Generated by c86 (BYU-NASM) 5.1 (beta) from lab4c_app.i
  1989 |          |                           | 	CPU	8086
  1990 |          |                           | 	ALIGN	2
  1991 | 00000E7A | EB26                      | 	jmp	main	; Jump to program start
  1992 |          |                           | L_lab4c_app_2:
  1993 | 00000E7C | 5374617274696E6720-       | 	DB	"Starting kernel...",0xA,0
  1994 | 00000E85 | 6B65726E656C2E2E2E-       | ...
  1995 | 00000E8E | 0A00                      | ...
  1996 |          |                           | L_lab4c_app_1:
  1997 | 00000E90 | 4372656174696E6720-       | 	DB	"Creating task...",0xA,0
  1998 | 00000E99 | 7461736B2E2E2E0A00        | ...
  1999 |          |                           | 	ALIGN	2
  2000 |          |                           | main:
  2001 |          |                           | 	; >>>>> Line:	17
  2002 |          |                           | 	; >>>>> { 
  2003 | 00000EA2 | EB2F                      | 	jmp	L_lab4c_app_3
  2004 |          |                           | L_lab4c_app_4:
  2005 |          |                           | 	; >>>>> Line:	18
  2006 |          |                           | 	; >>>>> YKInitialize(); 
  2007 | 00000EA4 | E813FB                    | 	call	YKInitialize
  2008 |          |                           | 	; >>>>> Line:	20
  2009 |          |                           | 	; >>>>> printString("Creating task...\n"); 
  2010 | 00000EA7 | B8[900E]                  | 	mov	ax, L_lab4c_app_1
  2011 | 00000EAA | 50                        | 	push	ax
  2012 | 00000EAB | E87AF5                    | 	call	printString
  2013 | 00000EAE | 83C402                    | 	add	sp, 2
  2014 |          |                           | 	; >>>>> Line:	21
  2015 |          |                           | 	; >>>>> YKNewTask(Task, (void *) &TaskStack[256], 0); 
  2016 | 00000EB1 | 30C0                      | 	xor	al, al
  2017 | 00000EB3 | 50                        | 	push	ax
  2018 | 00000EB4 | B8[A811]                  | 	mov	ax, (TaskStack+512)
  2019 | 00000EB7 | 50                        | 	push	ax
  2020 | 00000EB8 | B8[300F]                  | 	mov	ax, Task
  2021 | 00000EBB | 50                        | 	push	ax
  2022 | 00000EBC | E87DFB                    | 	call	YKNewTask
  2023 | 00000EBF | 83C406                    | 	add	sp, 6
  2024 |          |                           | 	; >>>>> Line:	23
  2025 |          |                           | 	; >>>>> itches! Y 
  2026 | 00000EC2 | B8[7C0E]                  | 	mov	ax, L_lab4c_app_2
  2027 | 00000EC5 | 50                        | 	push	ax
  2028 | 00000EC6 | E85FF5                    | 	call	printString
  2029 | 00000EC9 | 83C402                    | 	add	sp, 2
  2030 |          |                           | 	; >>>>> Line:	24
  2031 |          |                           | 	; >>>>> YKRun(); 
  2032 | 00000ECC | E8DBFC                    | 	call	YKRun
  2033 | 00000ECF | 89EC                      | 	mov	sp, bp
  2034 | 00000ED1 | 5D                        | 	pop	bp
  2035 | 00000ED2 | C3                        | 	ret
  2036 |          |                           | L_lab4c_app_3:
  2037 | 00000ED3 | 55                        | 	push	bp
  2038 | 00000ED4 | 89E5                      | 	mov	bp, sp
  2039 | 00000ED6 | EBCC                      | 	jmp	L_lab4c_app_4
  2040 |          |                           | L_lab4c_app_9:
  2041 | 00000ED8 | 20636F6E7465787420-       | 	DB	" context switches! YKIdleCount is ",0
  2042 | 00000EE1 | 737769746368657321-       | ...
  2043 | 00000EEA | 20594B49646C65436F-       | ...
  2044 | 00000EF3 | 756E742069732000          | ...
  2045 |          |                           | L_lab4c_app_8:
  2046 | 00000EFB | 5461736B2072756E6E-       | 	DB	"Task running after ",0
  2047 | 00000F04 | 696E67206166746572-       | ...
  2048 | 00000F0D | 2000                      | ...
  2049 |          |                           | L_lab4c_app_7:
  2050 | 00000F0F | 44656C6179696E6720-       | 	DB	"Delaying task...",0xA,0
  2051 | 00000F18 | 7461736B2E2E2E0A00        | ...
  2052 |          |                           | L_lab4c_app_6:
  2053 | 00000F21 | 5461736B2073746172-       | 	DB	"Task started.",0xA,0
  2054 | 00000F2A | 7465642E0A00              | ...
  2055 |          |                           | 	ALIGN	2
  2056 |          |                           | Task:
  2057 |          |                           | 	; >>>>> Line:	28
  2058 |          |                           | 	; >>>>> { 
  2059 | 00000F30 | EB6E                      | 	jmp	L_lab4c_app_10
  2060 |          |                           | L_lab4c_app_11:
  2061 |          |                           | 	; >>>>> Line:	32
  2062 |          |                           | 	; >>>>> printString("Task started.\n"); 
  2063 | 00000F32 | B8[210F]                  | 	mov	ax, L_lab4c_app_6
  2064 | 00000F35 | 50                        | 	push	ax
  2065 | 00000F36 | E8EFF4                    | 	call	printString
  2066 | 00000F39 | 83C402                    | 	add	sp, 2
  2067 |          |                           | 	; >>>>> Line:	33
  2068 |          |                           | 	; >>>>> while (1) 
  2069 | 00000F3C | EB5C                      | 	jmp	L_lab4c_app_13
  2070 |          |                           | L_lab4c_app_12:
  2071 |          |                           | 	; >>>>> Line:	35
  2072 |          |                           | 	; >>>>> printString("Delaying task...\n"); 
  2073 | 00000F3E | B8[0F0F]                  | 	mov	ax, L_lab4c_app_7
  2074 | 00000F41 | 50                        | 	push	ax
  2075 | 00000F42 | E8E3F4                    | 	call	printString
  2076 | 00000F45 | 83C402                    | 	add	sp, 2
  2077 |          |                           | 	; >>>>> Line:	37
  2078 |          |                           | 	; >>>>> YKDelayTask(2); 
  2079 | 00000F48 | B80200                    | 	mov	ax, 2
  2080 | 00000F4B | 50                        | 	push	ax
  2081 | 00000F4C | E8A3FC                    | 	call	YKDelayTask
  2082 | 00000F4F | 83C402                    | 	add	sp, 2
  2083 |          |                           | 	; >>>>> Line:	39
  2084 |          |                           | 	; >>>>> YKEnterMutex(); 
  2085 | 00000F52 | E811FF                    | 	call	YKEnterMutex
  2086 |          |                           | 	; >>>>> Line:	40
  2087 |          |                           | 	; >>>>> numCtxSwitches = YKCtxSwCount; 
  2088 | 00000F55 | A1[280C]                  | 	mov	ax, word [YKCtxSwCount]
  2089 | 00000F58 | 8946FC                    | 	mov	word [bp-4], ax
  2090 |          |                           | 	; >>>>> Line:	41
  2091 |          |                           | 	; >>>>> idleCount = YKIdleCount; 
  2092 | 00000F5B | A1[2A0C]                  | 	mov	ax, word [YKIdleCount]
  2093 | 00000F5E | 8946FE                    | 	mov	word [bp-2], ax
  2094 |          |                           | 	; >>>>> Line:	42
  2095 |          |                           | 	; >>>>> YKIdleCount = 0; 
  2096 | 00000F61 | C706[2A0C]0000            | 	mov	word [YKIdleCount], 0
  2097 |          |                           | 	; >>>>> Line:	43
  2098 |          |                           | 	; >>>>> YKExitMutex(); 
  2099 | 00000F67 | E8FEFE                    | 	call	YKExitMutex
  2100 |          |                           | 	; >>>>> Line:	45
  2101 |          |                           | 	; >>>>> printString("Task running after "); 
  2102 | 00000F6A | B8[FB0E]                  | 	mov	ax, L_lab4c_app_8
  2103 | 00000F6D | 50                        | 	push	ax
  2104 | 00000F6E | E8B7F4                    | 	call	printString
  2105 | 00000F71 | 83C402                    | 	add	sp, 2
  2106 |          |                           | 	; >>>>> Line:	46
  2107 |          |                           | 	; >>>>> printUInt(numCtxSwitches); 
  2108 | 00000F74 | FF76FC                    | 	push	word [bp-4]
  2109 | 00000F77 | E852F6                    | 	call	printUInt
  2110 | 00000F7A | 83C402                    | 	add	sp, 2
  2111 |          |                           | 	; >>>>> Line:	47
  2112 |          |                           | 	; >>>>> printString(" context switches! Y 
  2113 | 00000F7D | B8[D80E]                  | 	mov	ax, L_lab4c_app_9
  2114 | 00000F80 | 50                        | 	push	ax
  2115 | 00000F81 | E8A4F4                    | 	call	printString
  2116 | 00000F84 | 83C402                    | 	add	sp, 2
  2117 |          |                           | 	; >>>>> Line:	48
  2118 |          |                           | 	; >>>>> printUInt(idleCount); 
  2119 | 00000F87 | FF76FE                    | 	push	word [bp-2]
  2120 | 00000F8A | E83FF6                    | 	call	printUInt
  2121 | 00000F8D | 83C402                    | 	add	sp, 2
  2122 |          |                           | 	; >>>>> Line:	49
  2123 |          |                           | 	; >>>>> printString(".\n"); 
  2124 | 00000F90 | B8[9F0E]                  | 	mov	ax, (L_lab4c_app_1+15)
  2125 | 00000F93 | 50                        | 	push	ax
  2126 | 00000F94 | E891F4                    | 	call	printString
  2127 | 00000F97 | 83C402                    | 	add	sp, 2
  2128 |          |                           | L_lab4c_app_13:
  2129 | 00000F9A | EBA2                      | 	jmp	L_lab4c_app_12
  2130 |          |                           | L_lab4c_app_14:
  2131 | 00000F9C | 89EC                      | 	mov	sp, bp
  2132 | 00000F9E | 5D                        | 	pop	bp
  2133 | 00000F9F | C3                        | 	ret
  2134 |          |                           | L_lab4c_app_10:
  2135 | 00000FA0 | 55                        | 	push	bp
  2136 | 00000FA1 | 89E5                      | 	mov	bp, sp
  2137 | 00000FA3 | 83EC04                    | 	sub	sp, 4
  2138 | 00000FA6 | EB8A                      | 	jmp	L_lab4c_app_11
  2139 |          |                           | 	ALIGN	2
  2140 |          |                           | TaskStack:
  2141 | 00000FA8 | 00<rept>                  | 	TIMES	512 db 0
