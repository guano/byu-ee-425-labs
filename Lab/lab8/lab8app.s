; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
getMovePieceQueueArrayIndex:
	jmp	L_lab8app_1
L_lab8app_2:
	cmp	word [movePieceArrayIndex], 40
	jne	L_lab8app_3
	mov	word [movePieceArrayIndex], 0
L_lab8app_3:
	mov	ax, word [movePieceArrayIndex]
	inc	word [movePieceArrayIndex]
L_lab8app_4:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_1:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_2
	ALIGN	2
getLowerBucket:
	jmp	L_lab8app_6
L_lab8app_7:
	mov	word [bp-2], 0
	mov	word [bp-4], 0
	mov	ax, word [screen0]
	mov	word [bp-6], ax
	mov	ax, word [screen3]
	mov	word [bp-8], ax
	jmp	L_lab8app_9
L_lab8app_8:
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	word [bp-6], ax
L_lab8app_9:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_8
L_lab8app_10:
	jmp	L_lab8app_12
L_lab8app_11:
	mov	ax, word [bp-4]
	inc	ax
	mov	word [bp-4], ax
	mov	ax, word [bp-8]
	shl	ax, 1
	mov	word [bp-8], ax
L_lab8app_12:
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_11
L_lab8app_13:
	mov	ax, word [bp-2]
	cmp	ax, word [bp-4]
	jl	L_lab8app_14
	xor	ax, ax
	jmp	L_lab8app_15
L_lab8app_14:
	mov	ax, 1
L_lab8app_15:
L_lab8app_16:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_6:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_7
	ALIGN	2
isBucketFlat:
	jmp	L_lab8app_18
L_lab8app_19:
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_lab8app_20
	mov	ax, word [screen3]
	mov	word [bp-2], ax
	mov	ax, word [screen5]
	mov	word [bp-4], ax
	jmp	L_lab8app_21
L_lab8app_20:
	mov	ax, word [screen0]
	mov	word [bp-2], ax
	mov	ax, word [screen2]
	mov	word [bp-4], ax
L_lab8app_21:
	jmp	L_lab8app_23
L_lab8app_22:
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	ax, word [bp-4]
	shl	ax, 1
L_lab8app_23:
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_lab8app_25
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_22
L_lab8app_25:
L_lab8app_24:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-2]
	je	L_lab8app_26
	xor	ax, ax
	jmp	L_lab8app_27
L_lab8app_26:
	mov	ax, 1
L_lab8app_27:
L_lab8app_28:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_18:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab8app_19
L_lab8app_30:
	DB	"You really want a column not 0-5???",0xA,0
	ALIGN	2
getLowestSpace:
	jmp	L_lab8app_31
L_lab8app_32:
	mov	word [bp-2], 0
	mov	ax, word [bp+4]
	sub	ax, 0
	je	L_lab8app_35
	dec	ax
	je	L_lab8app_36
	dec	ax
	je	L_lab8app_37
	dec	ax
	je	L_lab8app_38
	dec	ax
	je	L_lab8app_39
	dec	ax
	je	L_lab8app_40
	jmp	L_lab8app_34
L_lab8app_35:
	mov	ax, word [screen0]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_36:
	mov	ax, word [screen1]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_37:
	mov	ax, word [screen2]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_38:
	mov	ax, word [screen3]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_39:
	mov	ax, word [screen4]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_40:
	mov	ax, word [screen5]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_34:
	mov	ax, L_lab8app_30
	push	ax
	call	printString
	add	sp, 2
L_lab8app_33:
	jmp	L_lab8app_42
L_lab8app_41:
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	word [bp-4], ax
L_lab8app_42:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_41
L_lab8app_43:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_31:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab8app_32
L_lab8app_45:
	DB	"CODE NOT WRITTEN :'(",0
	ALIGN	2
tryToClearLine:
	jmp	L_lab8app_46
L_lab8app_47:
	mov	ax, 1
	mov	cx, word [bp+4]
	shl	ax, cl
	and	ax, word [screen0]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen1]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen2]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen3]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen4]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen5]
	je	L_lab8app_48
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_lab8app_49
	mov	ax, word [screen0]
	shl	ax, 1
	mov	word [screen0], ax
	mov	ax, word [screen1]
	shl	ax, 1
	mov	word [screen1], ax
	mov	ax, word [screen2]
	shl	ax, 1
	mov	word [screen2], ax
	mov	ax, word [screen3]
	shl	ax, 1
	mov	word [screen3], ax
	mov	ax, word [screen4]
	shl	ax, 1
	mov	word [screen4], ax
	mov	ax, word [screen5]
	shl	ax, 1
	mov	word [screen5], ax
	jmp	L_lab8app_50
L_lab8app_49:
	mov	ax, L_lab8app_45
	push	ax
	call	printString
	add	sp, 2
L_lab8app_50:
L_lab8app_48:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_46:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_47
L_lab8app_62:
	DB	"Thank you for playing newPieceTask. The while loop will now cycle to the beginning",0xA,0
L_lab8app_61:
	DB	"oops. it is a corner piece",0xA,0
L_lab8app_60:
	DB	"rotating straight piece",0xA,0
L_lab8app_59:
	DB	"moving straight piece left",0xA,0
L_lab8app_58:
	DB	"Moving Straight piece right",0xA,0
L_lab8app_57:
	DB	"Straight piece received!",0xA,0
L_lab8app_56:
	DB	0xA,"column: ",0
L_lab8app_55:
	DB	0xA,"orientation: ",0
L_lab8app_54:
	DB	0xA,"type: ",0
L_lab8app_53:
	DB	"received a message!",0xA,"ID: ",0
L_lab8app_52:
	DB	"newPieceTask moving!",0xA,0
	ALIGN	2
newPieceTask:
	jmp	L_lab8app_63
L_lab8app_64:
	mov	ax, L_lab8app_52
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab8app_66
L_lab8app_65:
	push	word [newPieceQueuePTR]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	mov	ax, L_lab8app_53
	push	ax
	call	printString
	add	sp, 2
	mov	si, word [bp-2]
	push	word [si]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_54
	push	ax
	call	printString
	add	sp, 2
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_55
	push	ax
	call	printString
	add	sp, 2
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_56
	push	ax
	call	printString
	add	sp, 2
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	mov	ax, (L_lab8app_30+35)
	push	ax
	call	printString
	add	sp, 2
	mov	si, word [bp-2]
	add	si, 2
	cmp	word [si], 1
	jne	L_lab8app_68
	mov	ax, L_lab8app_57
	push	ax
	call	printString
	add	sp, 2
	call	getLowerBucket
	mov	word [bp-4], ax
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-6], ax
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_lab8app_69
	mov	ax, 3
	jmp	L_lab8app_70
L_lab8app_69:
	xor	ax, ax
L_lab8app_70:
	push	ax
	call	getLowestSpace
	add	sp, 2
	mov	word [bp-10], ax
	mov	ax, word [bp-4]
	mov	word [bp-12], ax
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_lab8app_71
	mov	ax, 4
	jmp	L_lab8app_72
L_lab8app_71:
	mov	ax, 1
L_lab8app_72:
	mov	word [bp-4], ax
	jmp	L_lab8app_74
L_lab8app_73:
	mov	ax, L_lab8app_58
	push	ax
	call	printString
	add	sp, 2
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_74:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jg	L_lab8app_73
L_lab8app_75:
	jmp	L_lab8app_77
L_lab8app_76:
	mov	ax, L_lab8app_59
	push	ax
	call	printString
	add	sp, 2
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_77:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jl	L_lab8app_76
L_lab8app_78:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_79
	mov	ax, L_lab8app_60
	push	ax
	call	printString
	add	sp, 2
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_79:
	mov	ax, word [bp-12]
	test	ax, ax
	jne	L_lab8app_80
	mov	ax, 1
	mov	cx, word [bp-10]
	shl	ax, cl
	or	ax, word [screen0]
	mov	word [screen0], ax
	mov	ax, 1
	shl	ax, cl
	or	ax, word [screen1]
	mov	word [screen1], ax
	mov	ax, 1
	shl	ax, cl
	or	ax, word [screen2]
	mov	word [screen2], ax
L_lab8app_80:
	push	word [bp-10]
	call	tryToClearLine
	add	sp, 2
	jmp	L_lab8app_81
L_lab8app_68:
	mov	ax, L_lab8app_61
	push	ax
	call	printString
	add	sp, 2
	call	getLowerBucket
	mov	word [bp-4], ax
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-6], ax
	push	word [bp-4]
	call	isBucketFlat
	add	sp, 2
	test	ax, ax
	je	L_lab8app_82
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_lab8app_84
	xor	ax, ax
	jmp	L_lab8app_85
L_lab8app_84:
	mov	ax, 1
L_lab8app_85:
	push	ax
	call	isBucketFlat
	add	sp, 2
	test	ax, ax
	je	L_lab8app_83
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_lab8app_86
	mov	word [bp-4], 3
	jmp	L_lab8app_88
L_lab8app_87:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_88:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jg	L_lab8app_87
L_lab8app_89:
	jmp	L_lab8app_91
L_lab8app_90:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_91:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jl	L_lab8app_90
L_lab8app_92:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_93
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_93:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	jne	L_lab8app_94
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_94:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	je	L_lab8app_96
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_95
L_lab8app_96:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_95:
	jmp	L_lab8app_97
L_lab8app_86:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_98
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_98
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_99
L_lab8app_98:
	cmp	word [bp-6], 5
	jne	L_lab8app_100
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_100
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_100:
L_lab8app_99:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_101
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_101:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	jne	L_lab8app_102
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_102:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	je	L_lab8app_104
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_103
L_lab8app_104:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_103:
	jmp	L_lab8app_106
L_lab8app_105:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_106:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jl	L_lab8app_105
L_lab8app_107:
L_lab8app_97:
	jmp	L_lab8app_108
L_lab8app_83:
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_lab8app_109
	xor	ax, ax
	jmp	L_lab8app_110
L_lab8app_109:
	mov	ax, 1
L_lab8app_110:
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_lab8app_111
	mov	ax, 5
	jmp	L_lab8app_112
L_lab8app_111:
	mov	ax, 2
L_lab8app_112:
	mov	word [bp-4], ax
	cmp	word [bp-4], 5
	jne	L_lab8app_113
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_114
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	je	L_lab8app_114
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_115
L_lab8app_114:
	cmp	word [bp-6], 5
	jne	L_lab8app_116
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	je	L_lab8app_116
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_116:
L_lab8app_115:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_117
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_117:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_118
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_118:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_120
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_119
L_lab8app_120:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_119:
	jmp	L_lab8app_122
L_lab8app_121:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_122:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jg	L_lab8app_121
L_lab8app_123:
	jmp	L_lab8app_124
L_lab8app_113:
	jmp	L_lab8app_126
L_lab8app_125:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_126:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jg	L_lab8app_125
L_lab8app_127:
	jmp	L_lab8app_129
L_lab8app_128:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_129:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jl	L_lab8app_128
L_lab8app_130:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_131
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_131:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_132
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_132:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_134
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_133
L_lab8app_134:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_133:
L_lab8app_124:
L_lab8app_108:
	jmp	L_lab8app_135
L_lab8app_82:
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_lab8app_136
	mov	ax, 5
	jmp	L_lab8app_137
L_lab8app_136:
	mov	ax, 2
L_lab8app_137:
	mov	word [bp-4], ax
	cmp	word [bp-4], 5
	jne	L_lab8app_138
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_139
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	je	L_lab8app_139
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_140
L_lab8app_139:
	cmp	word [bp-6], 5
	jne	L_lab8app_141
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 2
	je	L_lab8app_141
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_141:
L_lab8app_140:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_142
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_142:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_143
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_143:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_145
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_144
L_lab8app_145:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_144:
	jmp	L_lab8app_147
L_lab8app_146:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_147:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jg	L_lab8app_146
L_lab8app_148:
	jmp	L_lab8app_149
L_lab8app_138:
	jmp	L_lab8app_151
L_lab8app_150:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_151:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jg	L_lab8app_150
L_lab8app_152:
	jmp	L_lab8app_154
L_lab8app_153:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_154:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-6]
	jl	L_lab8app_153
L_lab8app_155:
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 1
	jne	L_lab8app_156
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_156:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_157
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_157:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_159
	mov	si, word [bp-2]
	add	si, 4
	cmp	word [si], 3
	jne	L_lab8app_158
L_lab8app_159:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_158:
L_lab8app_149:
L_lab8app_135:
L_lab8app_81:
	mov	ax, L_lab8app_62
	push	ax
	call	printString
	add	sp, 2
L_lab8app_66:
	jmp	L_lab8app_65
L_lab8app_67:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_63:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_lab8app_64
L_lab8app_165:
	DB	"called the function!",0xA,0
L_lab8app_164:
	DB	"got a piece. ID ",0
L_lab8app_163:
	DB	"piece move event. getting move now",0xA,0
L_lab8app_162:
	DB	"Wait for event!",0xA,0
L_lab8app_161:
	DB	"movePieceTask moving!",0xA,0
	ALIGN	2
movePieceTask:
	jmp	L_lab8app_166
L_lab8app_167:
	mov	ax, L_lab8app_161
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab8app_169
L_lab8app_168:
	mov	ax, L_lab8app_162
	push	ax
	call	printString
	add	sp, 2
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	push	word [pieceMoveEvent]
	call	YKEventPend
	add	sp, 6
	mov	ax, 1
	push	ax
	push	word [pieceMoveEvent]
	call	YKEventReset
	add	sp, 4
	mov	ax, L_lab8app_163
	push	ax
	call	printString
	add	sp, 2
	push	word [movePieceQueuePTR]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	mov	ax, L_lab8app_164
	push	ax
	call	printString
	add	sp, 2
	mov	si, word [bp-2]
	push	word [si]
	call	printInt
	add	sp, 2
	mov	ax, (L_lab8app_30+35)
	push	ax
	call	printString
	add	sp, 2
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	add	si, 2
	mov	si, word [si]
	call	si
	add	sp, 4
	mov	ax, L_lab8app_165
	push	ax
	call	printString
	add	sp, 2
L_lab8app_169:
	jmp	L_lab8app_168
L_lab8app_170:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_166:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_167
L_lab8app_176:
	DB	"% >>>>>",0xD,0xA,0
L_lab8app_175:
	DB	", CPU usage: ",0
L_lab8app_174:
	DB	"<<<<< Context switches: ",0
L_lab8app_173:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab8app_172:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	jmp	L_lab8app_177
L_lab8app_178:
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	ax, L_lab8app_172
	push	ax
	call	printString
	add	sp, 2
	mov	ax, L_lab8app_173
	push	ax
	call	printString
	add	sp, 2
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	word [YKIdleCount], 0
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	mov	word [YKIdleCount], 0
	mov	ax, 1251
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	mov	al, 5
	push	ax
	mov	ax, (newPieceTaskStk+1024)
	push	ax
	mov	ax, newPieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	al, 3
	push	ax
	mov	ax, (movePieceTaskStk+1024)
	push	ax
	mov	ax, movePieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	call	StartSimptris
	jmp	L_lab8app_180
L_lab8app_179:
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	call	YKEnterMutex
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	call	YKExitMutex
	mov	ax, L_lab8app_174
	push	ax
	call	printString
	add	sp, 2
	push	word [bp-4]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_175
	push	ax
	call	printString
	add	sp, 2
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_176
	push	ax
	call	printString
	add	sp, 2
	call	YKEnterMutex
	mov	word [YKCtxSwCount], 0
	mov	word [YKIdleCount], 0
	call	YKExitMutex
L_lab8app_180:
	jmp	L_lab8app_179
L_lab8app_181:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_177:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_178
	ALIGN	2
main:
	jmp	L_lab8app_183
L_lab8app_184:
	call	YKInitialize
	mov	ax, 10
	push	ax
	mov	ax, newPieceQueue
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [newPieceQueuePTR], ax
	mov	ax, 20
	push	ax
	mov	ax, movePieceQueue
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [movePieceQueuePTR], ax
	mov	ax, 1
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [pieceMoveEvent], ax
	xor	al, al
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_183:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_184
	ALIGN	2
movePieceQueuePTR:
	TIMES	2 db 0
newPieceQueuePTR:
	TIMES	2 db 0
pieceMoveEvent:
	TIMES	2 db 0
STaskStk:
	TIMES	1024 db 0
testintbog:
	TIMES	2 db 0
test2:
	TIMES	2 db 0
movePieceTaskStk:
	TIMES	1024 db 0
test3:
	TIMES	2 db 0
test4:
	TIMES	2 db 0
newPieceTaskStk:
	TIMES	1024 db 0
test5:
	TIMES	2 db 0
test6:
	TIMES	2 db 0
newPieceArray:
	TIMES	160 db 0
newPieceQueue:
	TIMES	20 db 0
movePieceArray:
	TIMES	240 db 0
movePieceArrayIndex:
	TIMES	2 db 0
movePieceQueue:
	TIMES	40 db 0
screen0:
	TIMES	2 db 0
screen1:
	TIMES	2 db 0
screen2:
	TIMES	2 db 0
screen3:
	TIMES	2 db 0
screen4:
	TIMES	2 db 0
screen5:
	TIMES	2 db 0
