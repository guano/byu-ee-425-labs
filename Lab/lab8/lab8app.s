; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
getMovePieceQueueArrayIndex:
	jmp	L_lab8app_1
L_lab8app_2:
	cmp	word [movePieceArrayIndex], 40
	jne	L_lab8app_3
	mov	word [movePieceArrayIndex], 0
L_lab8app_3:
	mov	ax, word [movePieceArrayIndex]
	inc	word [movePieceArrayIndex]
L_lab8app_4:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_1:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_2
	ALIGN	2
getLowerBucket:
	jmp	L_lab8app_6
L_lab8app_7:
	mov	word [bp-2], 0
	mov	word [bp-4], 0
	mov	ax, word [screen0]
	mov	word [bp-6], ax
	mov	ax, word [screen3]
	mov	word [bp-8], ax
	jmp	L_lab8app_9
L_lab8app_8:
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
	mov	ax, word [bp-6]
	shl	ax, 1
	mov	word [bp-6], ax
L_lab8app_9:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_8
L_lab8app_10:
	jmp	L_lab8app_12
L_lab8app_11:
	mov	ax, word [bp-4]
	inc	ax
	mov	word [bp-4], ax
	mov	ax, word [bp-8]
	shl	ax, 1
	mov	word [bp-8], ax
L_lab8app_12:
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_11
L_lab8app_13:
	mov	ax, word [bp-2]
	cmp	ax, word [bp-4]
	jl	L_lab8app_14
	xor	ax, ax
	jmp	L_lab8app_15
L_lab8app_14:
	mov	ax, 1
L_lab8app_15:
L_lab8app_16:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_6:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_7
	ALIGN	2
isBucketFlat:
	jmp	L_lab8app_18
L_lab8app_19:
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_lab8app_20
	mov	ax, word [screen3]
	mov	word [bp-2], ax
	mov	ax, word [screen5]
	mov	word [bp-4], ax
	jmp	L_lab8app_21
L_lab8app_20:
	mov	ax, word [screen0]
	mov	word [bp-2], ax
	mov	ax, word [screen2]
	mov	word [bp-4], ax
L_lab8app_21:
	jmp	L_lab8app_23
L_lab8app_22:
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	ax, word [bp-4]
	shl	ax, 1
L_lab8app_23:
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_lab8app_25
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_22
L_lab8app_25:
L_lab8app_24:
	mov	ax, word [bp-4]
	cmp	ax, word [bp-2]
	je	L_lab8app_26
	xor	ax, ax
	jmp	L_lab8app_27
L_lab8app_26:
	mov	ax, 1
L_lab8app_27:
L_lab8app_28:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_18:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab8app_19
L_lab8app_30:
	DB	"You really want a column not 0-5???",0xA,0
	ALIGN	2
getLowestSpace:
	jmp	L_lab8app_31
L_lab8app_32:
	mov	word [bp-2], 0
	mov	ax, word [bp+4]
	sub	ax, 0
	je	L_lab8app_35
	dec	ax
	je	L_lab8app_36
	dec	ax
	je	L_lab8app_37
	dec	ax
	je	L_lab8app_38
	dec	ax
	je	L_lab8app_39
	dec	ax
	je	L_lab8app_40
	jmp	L_lab8app_34
L_lab8app_35:
	mov	ax, word [screen0]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_36:
	mov	ax, word [screen1]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_37:
	mov	ax, word [screen2]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_38:
	mov	ax, word [screen3]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_39:
	mov	ax, word [screen4]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_40:
	mov	ax, word [screen5]
	mov	word [bp-4], ax
	jmp	L_lab8app_33
L_lab8app_34:
	mov	ax, L_lab8app_30
	push	ax
	call	printString
	add	sp, 2
L_lab8app_33:
	jmp	L_lab8app_42
L_lab8app_41:
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	word [bp-4], ax
L_lab8app_42:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_41
L_lab8app_43:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_31:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab8app_32
L_lab8app_45:
	DB	"CODE NOT WRITTEN :'(",0
	ALIGN	2
tryToClearLine:
	jmp	L_lab8app_46
L_lab8app_47:
	mov	ax, 1
	mov	cx, word [bp+4]
	shl	ax, cl
	and	ax, word [screen0]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen1]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen2]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen3]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen4]
	je	L_lab8app_48
	mov	ax, 1
	shl	ax, cl
	and	ax, word [screen5]
	je	L_lab8app_48
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_lab8app_49
	mov	ax, word [screen0]
	shl	ax, 1
	mov	word [screen0], ax
	mov	ax, word [screen1]
	shl	ax, 1
	mov	word [screen1], ax
	mov	ax, word [screen2]
	shl	ax, 1
	mov	word [screen2], ax
	mov	ax, word [screen3]
	shl	ax, 1
	mov	word [screen3], ax
	mov	ax, word [screen4]
	shl	ax, 1
	mov	word [screen4], ax
	mov	ax, word [screen5]
	shl	ax, 1
	mov	word [screen5], ax
	jmp	L_lab8app_50
L_lab8app_49:
	mov	ax, L_lab8app_45
	push	ax
	call	printString
	add	sp, 2
L_lab8app_50:
L_lab8app_48:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_46:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_47
L_lab8app_52:
	DB	"current Board:",0xA,0
	ALIGN	2
printBoard:
	jmp	L_lab8app_53
L_lab8app_54:
	mov	ax, L_lab8app_52
	push	ax
	call	printString
	add	sp, 2
	mov	word [bp-2], 0
	jmp	L_lab8app_56
L_lab8app_55:
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [screen0]
	je	L_lab8app_59
	mov	ax, 1
	jmp	L_lab8app_60
L_lab8app_59:
	xor	ax, ax
L_lab8app_60:
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [screen1]
	je	L_lab8app_61
	mov	ax, 1
	jmp	L_lab8app_62
L_lab8app_61:
	xor	ax, ax
L_lab8app_62:
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [screen2]
	je	L_lab8app_63
	mov	ax, 1
	jmp	L_lab8app_64
L_lab8app_63:
	xor	ax, ax
L_lab8app_64:
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [screen3]
	je	L_lab8app_65
	mov	ax, 1
	jmp	L_lab8app_66
L_lab8app_65:
	xor	ax, ax
L_lab8app_66:
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [screen4]
	je	L_lab8app_67
	mov	ax, 1
	jmp	L_lab8app_68
L_lab8app_67:
	xor	ax, ax
L_lab8app_68:
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [screen5]
	je	L_lab8app_69
	mov	ax, 1
	jmp	L_lab8app_70
L_lab8app_69:
	xor	ax, ax
L_lab8app_70:
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, (L_lab8app_30+35)
	push	ax
	call	printString
	add	sp, 2
L_lab8app_58:
	inc	word [bp-2]
L_lab8app_56:
	cmp	word [bp-2], 16
	jl	L_lab8app_55
L_lab8app_57:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_53:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_54
	ALIGN	2
getHeightDifference:
	jmp	L_lab8app_72
L_lab8app_73:
	mov	ax, word [ScreenBitMap0]
	mov	word [bp-2], ax
	mov	ax, word [ScreenBitMap3]
	mov	word [bp-4], ax
	mov	word [bp-6], 0
	mov	word [bp-8], 0
	jmp	L_lab8app_75
L_lab8app_74:
	mov	ax, word [bp-2]
	sar	ax, 1
	mov	word [bp-2], ax
	mov	ax, word [bp-4]
	sar	ax, 1
	mov	word [bp-4], ax
L_lab8app_75:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_lab8app_74
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_74
L_lab8app_76:
	mov	ax, word [bp-4]
L_lab8app_77:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_72:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_73
	ALIGN	2
L_lab8app_79:
	DW	0
L_lab8app_80:
	DB	"newPieceTask moving!",0xA,0
	ALIGN	2
newPieceTask:
	jmp	L_lab8app_81
L_lab8app_82:
	mov	ax, L_lab8app_80
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab8app_84
L_lab8app_83:
	push	word [newPieceQueuePTR]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	mov	si, word [bp-2]
	add	si, 2
	cmp	word [si], 1
	jne	L_lab8app_86
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-6], ax
	cmp	word [bp-6], 5
	jne	L_lab8app_87
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_88
L_lab8app_87:
	jmp	L_lab8app_90
L_lab8app_89:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_90:
	cmp	word [bp-6], 4
	jl	L_lab8app_89
L_lab8app_91:
L_lab8app_88:
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_92
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_92:
	jmp	L_lab8app_93
L_lab8app_86:
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-6], ax
	cmp	word [bp-6], 5
	jne	L_lab8app_94
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_95
L_lab8app_94:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_96
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_96:
L_lab8app_95:
	mov	ax, word [L_lab8app_79]
	test	ax, ax
	jne	L_lab8app_97
	mov	word [L_lab8app_79], 1
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	dec	ax
	je	L_lab8app_100
	dec	ax
	je	L_lab8app_101
	dec	ax
	je	L_lab8app_102
	jmp	L_lab8app_99
L_lab8app_100:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_98
L_lab8app_101:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_102:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_99:
L_lab8app_98:
	jmp	L_lab8app_104
L_lab8app_103:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_104:
	cmp	word [bp-6], 0
	jg	L_lab8app_103
L_lab8app_105:
	jmp	L_lab8app_106
L_lab8app_97:
	mov	word [L_lab8app_79], 0
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	sub	ax, 3
	je	L_lab8app_109
	sub	ax, -3
	je	L_lab8app_110
	dec	ax
	je	L_lab8app_111
	jmp	L_lab8app_108
L_lab8app_109:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
	jmp	L_lab8app_107
L_lab8app_110:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_111:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], RotatePiece
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_108:
L_lab8app_107:
	jmp	L_lab8app_113
L_lab8app_112:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_113:
	cmp	word [bp-6], 2
	jg	L_lab8app_112
L_lab8app_114:
	jmp	L_lab8app_116
L_lab8app_115:
	call	getMovePieceQueueArrayIndex
	mov	word [bp-8], ax
	mov	si, word [bp-2]
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	mov	di, ax
	add	di, movePieceArray
	mov	ax, word [si]
	mov	word [di], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	mov	si, ax
	add	si, 2
	mov	word [si], SlidePiece
	mov	ax, word [bp-6]
	inc	ax
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	mov	cx, 6
	imul	cx
	add	ax, movePieceArray
	push	ax
	push	word [movePieceQueuePTR]
	call	YKQPost
	add	sp, 4
L_lab8app_116:
	cmp	word [bp-6], 2
	jl	L_lab8app_115
L_lab8app_117:
L_lab8app_106:
L_lab8app_93:
L_lab8app_84:
	jmp	L_lab8app_83
L_lab8app_85:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_81:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_lab8app_82
L_lab8app_119:
	DB	"movePieceTask moving!",0xA,0
	ALIGN	2
movePieceTask:
	jmp	L_lab8app_120
L_lab8app_121:
	mov	ax, L_lab8app_119
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab8app_123
L_lab8app_122:
	mov	ax, 1
	push	ax
	mov	ax, 1
	push	ax
	push	word [pieceMoveEvent]
	call	YKEventPend
	add	sp, 6
	mov	ax, 1
	push	ax
	push	word [pieceMoveEvent]
	call	YKEventReset
	add	sp, 4
	push	word [movePieceQueuePTR]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	mov	si, word [bp-2]
	push	word [si]
	add	si, 2
	mov	si, word [si]
	call	si
	add	sp, 4
L_lab8app_123:
	jmp	L_lab8app_122
L_lab8app_124:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_120:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_121
L_lab8app_130:
	DB	"%>",0xA,0
L_lab8app_129:
	DB	", CPU: ",0
L_lab8app_128:
	DB	"<CS: ",0
L_lab8app_127:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab8app_126:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	jmp	L_lab8app_131
L_lab8app_132:
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	ax, L_lab8app_126
	push	ax
	call	printString
	add	sp, 2
	mov	ax, L_lab8app_127
	push	ax
	call	printString
	add	sp, 2
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	word [YKIdleCount], 0
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	mov	word [YKIdleCount], 0
	mov	ax, 5
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	mov	al, 3
	push	ax
	mov	ax, (newPieceTaskStk+1024)
	push	ax
	mov	ax, newPieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	al, 5
	push	ax
	mov	ax, (movePieceTaskStk+1024)
	push	ax
	mov	ax, movePieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	call	StartSimptris
	jmp	L_lab8app_134
L_lab8app_133:
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	call	YKEnterMutex
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	call	YKExitMutex
	mov	ax, L_lab8app_128
	push	ax
	call	printString
	add	sp, 2
	push	word [bp-4]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_129
	push	ax
	call	printString
	add	sp, 2
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_130
	push	ax
	call	printString
	add	sp, 2
	call	YKEnterMutex
	mov	word [YKCtxSwCount], 0
	mov	word [YKIdleCount], 0
	call	YKExitMutex
L_lab8app_134:
	jmp	L_lab8app_133
L_lab8app_135:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_131:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_132
L_lab8app_141:
	DB	0xA,"movePieceQueue: ",0
L_lab8app_140:
	DB	0xA,"newPieceQueue: ",0
L_lab8app_139:
	DB	0xA,"newPieceTask: ",0
L_lab8app_138:
	DB	0xA,"movePieceTask: ",0
L_lab8app_137:
	DB	"STask: ",0
	ALIGN	2
main:
	jmp	L_lab8app_142
L_lab8app_143:
	call	YKInitialize
	mov	ax, 40
	push	ax
	mov	ax, newPieceQueue
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [newPieceQueuePTR], ax
	mov	ax, 40
	push	ax
	mov	ax, movePieceQueue
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [movePieceQueuePTR], ax
	mov	ax, 1
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [pieceMoveEvent], ax
	mov	ax, L_lab8app_137
	push	ax
	call	printString
	add	sp, 2
	mov	ax, STask
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_138
	push	ax
	call	printString
	add	sp, 2
	mov	ax, movePieceTask
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_139
	push	ax
	call	printString
	add	sp, 2
	mov	ax, newPieceTask
	push	ax
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_140
	push	ax
	call	printString
	add	sp, 2
	push	word [newPieceQueuePTR]
	call	printInt
	add	sp, 2
	mov	ax, L_lab8app_141
	push	ax
	call	printString
	add	sp, 2
	push	word [movePieceQueuePTR]
	call	printInt
	add	sp, 2
	mov	ax, (L_lab8app_30+35)
	push	ax
	call	printString
	add	sp, 2
	xor	al, al
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_142:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_143
	ALIGN	2
movePieceQueuePTR:
	TIMES	2 db 0
newPieceQueuePTR:
	TIMES	2 db 0
pieceMoveEvent:
	TIMES	2 db 0
STaskStk:
	TIMES	1024 db 0
testintbog:
	TIMES	2 db 0
test2:
	TIMES	2 db 0
movePieceTaskStk:
	TIMES	1024 db 0
test3:
	TIMES	2 db 0
test4:
	TIMES	2 db 0
newPieceTaskStk:
	TIMES	1024 db 0
test5:
	TIMES	2 db 0
test6:
	TIMES	2 db 0
newPieceArray:
	TIMES	320 db 0
newPieceQueue:
	TIMES	80 db 0
movePieceArray:
	TIMES	240 db 0
movePieceArrayIndex:
	TIMES	2 db 0
movePieceQueue:
	TIMES	80 db 0
screen0:
	TIMES	2 db 0
screen1:
	TIMES	2 db 0
screen2:
	TIMES	2 db 0
screen3:
	TIMES	2 db 0
screen4:
	TIMES	2 db 0
screen5:
	TIMES	2 db 0
